{"version":3,"file":"static/js/535.ecb1a1b8.chunk.js","mappings":"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","sources":["Redux/chat/selectors.ts","webpack://my-app/./src/UI/ScrollBottomBtn/ScrollBottomBtn.module.scss?af1d","UI/ScrollBottomBtn/ScrollBottomBtn.tsx","utils/helpers/scrollElementToBottom.tsx","webpack://my-app/./src/components/Chat/Messages/Message/Message.module.scss?2dab","components/Chat/Messages/Message/MessageOptions/DeleteMessageOption.tsx","components/Chat/Messages/Message/Message.tsx","webpack://my-app/./src/components/Chat/Messages/Messages.module.scss?4dda","webpack://my-app/./src/UI/ReadMessageUser/ReadMessageUser.module.scss?b85c","UI/ReadMessageUser/ReadMessageUser.tsx","components/Chat/Messages/MessagesGroup/MessagesGroup.tsx","components/Chat/Messages/Messages.tsx","webpack://my-app/./src/components/Chat/Chat.module.scss?3294","webpack://my-app/./src/components/Chat/NewMessageForm/NewMessageForm.module.scss?1e51","components/Chat/NewMessageForm/NewMessageForm.tsx","components/Chat/Chat.tsx","utils/helpers/formatters.ts"],"sourcesContent":["import { RootStateType } from './../store';\r\n\r\nexport const selectMessages = (state: RootStateType) => {\r\n\treturn state.messages.messagesData;\r\n}\r\n\r\nexport const selectIsMessagesFetching = (state: RootStateType) => {\r\n\treturn state.messages.isFetching;\r\n}\r\n\r\nexport const selectCurrMessageWhoReadList = (state: RootStateType) => {\r\n\treturn state.messages.currMessageWhoReadList;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ScrollBottomBtn_container__1OHUl\",\"ScrollBottomBtn\":\"ScrollBottomBtn_ScrollBottomBtn__GScVs\",\"_hidden\":\"ScrollBottomBtn__hidden__+f-Ia\",\"arrow\":\"ScrollBottomBtn_arrow__h1LUK\",\"unreadCount\":\"ScrollBottomBtn_unreadCount__FhPX2\",\"icon\":\"ScrollBottomBtn_icon__60NNc\"};","import { ArrowDownOutlined } from '@ant-design/icons';\r\nimport { debounce } from 'lodash';\r\nimport React, { RefObject, useState } from 'react';\r\nimport { scrollElementToBottom } from '../../utils/helpers/scrollElementToBottom';\r\nimport classes from './ScrollBottomBtn.module.scss';\r\n\r\ntype PropsType = {\r\n\telement: HTMLDivElement,\r\n\tunreadCount: number,\r\n}\r\n\r\nexport const ScrollBottomBtn = React.forwardRef<HTMLButtonElement, PropsType>(({element, unreadCount}, ref) => {\r\n\tconst scrollToBottomHeight = element.scrollHeight - element.clientHeight;\r\n\tconst remainingScroll = element.scrollHeight - (element.scrollTop + element.clientHeight);\r\n\tconst [ isBottom, setIsBottom ] = useState<boolean>(remainingScroll < 100);\r\n\tconst [isShowing, setIsShowing] = useState<boolean>(false);\r\n\r\n\tlet prevElScroll: number = scrollToBottomHeight;\r\n\r\n\t//visible / unvisible\r\n \telement.addEventListener('scroll', debounce((e) => {\r\n\t\tlet currScroll = element.scrollTop;\r\n\t\tconst isInBottom = element.scrollHeight - (element.scrollTop + element.clientHeight) < 100;\r\n\t\tsetIsBottom(isInBottom);\r\n\r\n\t\tif(currScroll < prevElScroll && !isInBottom) {\r\n\t\t\tsetIsShowing(true);\r\n\t\t} else if(currScroll > prevElScroll)  {\r\n\t\t\tsetIsShowing(false);\r\n\t\t}\r\n\r\n\t\tprevElScroll = element.scrollTop;\r\n\t}, 20));\r\n\r\n\tconst scrollBottom = () => scrollElementToBottom(element, scrollToBottomHeight);\r\n\r\n\treturn (\r\n\t\t<div className={`${classes.ScrollBottomBtn} ${isBottom && !isShowing ? classes._hidden : ''}`}>\r\n\t\t\t<button ref={ref} className={classes.arrow} onClick={scrollBottom}>\r\n\t\t\t\t{unreadCount > 0 && <div className={classes.unreadCount}>\r\n\t\t\t\t\t{unreadCount}\r\n\t\t\t\t</div>}\r\n\t\t\t\t<ArrowDownOutlined className={classes.icon} />\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t)\r\n});\r\n","export const scrollElementToBottom = (element: HTMLDivElement, value?: number) => {\r\n\tconsole.log('scrolll elmenet to bottom', value);\r\n\r\n\tlet scrollToBottomHeight = 0;\r\n\tif(!value) {\r\n\t\tscrollToBottomHeight = element.scrollHeight - element.clientHeight\r\n\t}\r\n\telement.scrollTo({\r\n\t\tbehavior: 'smooth',\r\n\t\ttop: value || scrollToBottomHeight,\r\n\t});\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Message_container__98ggQ\",\"Message\":\"Message_Message__F164D\",\"_my\":\"Message__my__ylldE\",\"avatar\":\"Message_avatar__Caopz\",\"messageBody\":\"Message_messageBody__OUWWq\",\"username\":\"Message_username__fxinM\",\"text\":\"Message_text__WoS5w\",\"info\":\"Message_info__RJA5K\",\"createDate\":\"Message_createDate__xMQe3\",\"receivedStatus\":\"Message_receivedStatus__bfpZ1\",\"icon\":\"Message_icon__heZ9C\",\"edited\":\"Message_edited__g3pCJ\"};","import React from 'react';\r\nimport { Typography } from 'antd';\r\n\r\nconst { Text } = Typography;\r\n\r\ntype PropsType = {\r\n\tshowDeleteConfirm: (messageId: string) => void,\r\n\tclassName: string,\r\n\tmessageId: string,\r\n}\r\n\r\nexport const DeleteMessageOption: React.FC<PropsType> = ({showDeleteConfirm, className, messageId}) => {\r\n\treturn (\r\n\t\t<Text \r\n\t\t\tonClick={() => showDeleteConfirm(messageId)}\r\n\t\t\ttype='danger' className={className}\r\n\t\t>Видалити</Text>\r\n\t)\r\n};","import { Avatar, Dropdown, Menu, Typography } from 'antd';\r\nimport { CheckCircleOutlined, UserOutlined } from '@ant-design/icons';\r\nimport React from 'react'\r\nimport { MessageDataType, UsersWhoReadMessageType } from '../../../../utils/types';\r\nimport classes from './Message.module.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport { addZero } from '../../../../utils/helpers/formatters';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport { useAppDispatch } from '../../../../Redux/store';\r\nimport { markMessageAsRead } from '../../../../Redux/chat/reducer';\r\nimport { DeleteMessageOption } from './MessageOptions/DeleteMessageOption';\r\nimport { EditMessageDataType } from '../../Chat';\r\nimport ListSubheader from '@mui/material/ListSubheader';\r\nconst { Text } = Typography;\r\n\r\ntype PropsType = {\r\n\tmessageData: MessageDataType,\r\n\tmyAccountId: string,\r\n\tisShort: boolean,\r\n\tshowDeleteConfirm: (messageId: string) => void,\r\n\tsetEditMessageData: (data: EditMessageDataType) => void,\r\n\topenInfoModal: (usersWHoRead: UsersWhoReadMessageType) => void,\r\n};\r\n\r\nconst Message: React.FC<PropsType> = ({\r\n\tmessageData, myAccountId, showDeleteConfirm, setEditMessageData, openInfoModal, isShort\r\n}) => {\r\n\tconst { text, photoUrl, uid, id, usersWhoRead, createdAt, displayName, received, edited} = messageData;\r\n\r\n\t//intersection observer hook\r\n\tconst { ref: observerRef, inView, entry } = useInView({\r\n\t\tthreshold: 0.7,\r\n\t});\r\n\r\n\tconst dispatch = useAppDispatch();\r\n\r\n\t//if in view and weren't in view\r\n\tif(inView && !usersWhoRead.includes(myAccountId)) {\r\n\t\tdispatch(markMessageAsRead(id, myAccountId));\r\n\t}\r\n\r\n\t//check if my\r\n\tconst isMy = uid === myAccountId;\r\n\r\n\t//@ts-ignore\r\n\tconst createdAtMilisecs = createdAt?.seconds * 1000;\r\n\tconst sendDate = new Date(createdAtMilisecs || new Date().getTime());\r\n\t//getTime() - щоб не показувалися неправильні дані при надісланні повіомлення\r\n\tconst sendTime = `${addZero(sendDate.getHours())}:${addZero(sendDate.getMinutes())}`;\r\n\r\n\t//show this by (right button of mouse) click on message\r\n\tconst contextMenu = (\r\n\t\t<Menu className={classes.contextMenu}\r\n\t\t\titems={[\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: <Text onClick={() => setEditMessageData({value: text, id})}>Змінити</Text>,\r\n\t\t\t\t\tkey: '1',\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: <Text onClick={() => openInfoModal(usersWhoRead)}>Інформація</Text>,\r\n\t\t\t\t\tkey: '3',\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \r\n\t\t\t\t\t\t<DeleteMessageOption \r\n\t\t\t\t\t\t\tclassName={classes.deleteMessage} \r\n\t\t\t\t\t\t\tshowDeleteConfirm={showDeleteConfirm} messageId={messageData.id}\r\n\t\t\t\t\t\t/>,\r\n\t\t\t\t\tkey: '2',\r\n\t\t\t\t},\r\n\t\t\t]}\r\n\t\t/>\r\n\t );\r\n\r\n\treturn (\r\n\t\t<div className={`${classes.Message} ${isMy && classes._my}`} ref={observerRef}>\r\n\t\t\t{/* {!isShort && !isMy && <Link to={`/account/${!isMy ? uid : ''}`} replace={true}>\r\n\t\t\t\t<ListSubheader>\t\r\n\t\t\t\t\t<Avatar \r\n\t\t\t\t\t\tsrc={photoUrl} size={40} icon={<UserOutlined />}\r\n\t\t\t\t\t\tclassName={classes.avatar}\r\n\t\t\t\t\t/>\r\n\t\t\t</Link>} */}\r\n\t\t\t<Dropdown overlay={contextMenu} trigger={['contextMenu', 'click']}>\r\n\t\t\t\t<div className={classes.messageBody}>\r\n\t\t\t\t\t{!isShort && !isMy && <h5 className={classes.username}>{displayName}</h5>}\r\n\t\t\t\t\t<p className={classes.text}>{text}</p>\r\n\t\t\t\t\t<div className={classes.info}>\r\n\t\t\t\t\t\t<p className={classes.createDate}>{sendTime}</p>\r\n\r\n\t\t\t\t\t\t{isMy && <p className={classes.receivedStatus}>\r\n\t\t\t\t\t\t\t{received \r\n\t\t\t\t\t\t\t? <><CheckCircleOutlined className={classes.icon}/><CheckCircleOutlined className={classes.icon}/></> \r\n\t\t\t\t\t\t\t: <CheckCircleOutlined className={classes.icon} />}\r\n\t\t\t\t\t\t</p>}\r\n\r\n\t\t\t\t\t\t{edited && <p className={classes.edited}>Змінено</p>}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</Dropdown>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Message","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Messages_container__dr4Lv\",\"Messages\":\"Messages_Messages__9VokZ\",\"messagesDate\":\"Messages_messagesDate__8PYdw\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ReadMessageUser_container__tq+2i\",\"ReadMessageUser\":\"ReadMessageUser_ReadMessageUser__Xtepz\",\"name\":\"ReadMessageUser_name__tWFva\"};","import React from 'react'\r\nimport { ReceivedAccountDataType } from '../../utils/types';\r\nimport classes from './ReadMessageUser.module.scss';\r\nimport Avatar from 'antd/lib/avatar/avatar';\r\nimport { UserOutlined } from '@ant-design/icons';\r\n\r\ntype PropsType = {\r\n\tuserData: ReceivedAccountDataType,\r\n};\r\n\r\nexport const ReadMessageUser: React.FC<PropsType> = ({userData}) => {\r\n\tconst { name, surname, avatarUrl } = userData;\r\n\r\n\treturn (\r\n\t\t<div className={classes.ReadMessageUser}>\r\n\t\t\t<Avatar className={classes.avatar} src={avatarUrl} icon={<UserOutlined />} size={50}/>\r\n\t\t\t<p className={classes.name}>{name} {surname}</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React from 'react'\r\n\r\n\r\ntype PropsType = {\r\n\tmetadata: any,\r\n\tlistRef: React.RefObject<HTMLDivElement>,\r\n\tchildren: JSX.Element[],\r\n}\r\n\r\nexport type MessagesGroupMetadataType = {};\r\n\r\nexport const MessagesGroup: React.FC<PropsType> = ({metadata, children, listRef}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n","import { FieldValue } from 'firebase/firestore';\r\nimport React, { useEffect, useImperativeHandle, useRef, useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { selectMyLoginData } from '../../../Redux/account/account-selectors';\r\nimport { selectCurrMessageWhoReadList, selectIsMessagesFetching, selectMessages } from '../../../Redux/chat/selectors'; \r\nimport Preloader from '../../../UI/Preloader';\r\nimport { ScrollBottomBtn } from '../../../UI/ScrollBottomBtn';\r\nimport { MessageDataType, ReceivedAccountDataType, UsersWhoReadMessageType } from '../../../utils/types';\r\nimport Message from './Message';\r\nimport classes from './Messages.module.scss';\r\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\r\nimport confirm from 'antd/lib/modal/confirm';\r\nimport { useAppDispatch } from '../../../Redux/store';\r\nimport { deleteMessage, setCurrMessageWhoReadList } from '../../../Redux/chat/reducer';\r\nimport { EditMessageDataType } from '../Chat';\r\nimport { Avatar, Modal } from 'antd';\r\nimport { ReadMessageUser } from '../../../UI/ReadMessageUser';\r\nimport ListSubheader from '@mui/material/ListSubheader';\r\nimport { Link } from 'react-router-dom';\r\nimport { MessagesGroup } from './MessagesGroup';\r\nimport { MessagesGroupMetadataType } from './MessagesGroup/MessagesGroup';\r\n\r\ntype PropsType = {\r\n\tsetEditMessageData: (data: EditMessageDataType) => void, \r\n\t//ref: React.RefObject<HTMLButtonElement>,\r\n}\r\n\r\ntype FormattedMessagesType = {[key: string]: MessageDataType[]};\r\ntype MessagesGroupType = {\r\n\tmessages: JSX.Element[],\r\n\tmetadata: MessagesGroupMetadataType,\r\n}\r\n\r\nconst Messages = React.forwardRef<HTMLButtonElement, PropsType>(({setEditMessageData}, ref) => {\r\n\tconst messagesData = useSelector(selectMessages);\r\n\tconst isFetching = useSelector(selectIsMessagesFetching);\r\n\tconst loginData = useSelector(selectMyLoginData);\r\n\r\n\tconst [usersWhoReadCurrMessage, setUsersWhoReadCurrMessage] = useState<UsersWhoReadMessageType | null>(null);\r\n\tconst usersWhoReadCurrMessageData = useSelector(selectCurrMessageWhoReadList);\r\n\tconst [isUsersFetching, setIsUsersFetching] = useState<boolean>(false);\r\n\r\n\tconst listRef = useRef<HTMLDivElement>(null);\r\n\t\r\n\tconst dispatch = useAppDispatch();\r\n\r\n\t//show delete message modal\r\n\tconst showDeleteConfirm = (messageId: string) => {\r\n\t\tconfirm({\r\n\t\t\ttitle: 'Видалити повідомлення',\r\n\t\t\ticon: <ExclamationCircleOutlined />,\r\n\t\t\tcontent: 'Ви дійсно хочете видалити це повдомлення?',\r\n\t\t\tokText: 'Видалити',\r\n\t\t\tokType: 'danger',\r\n\t\t\tcancelText: 'Скасувати',\r\n\t\t\tonOk() {\r\n\t\t\t\tdispatch(deleteMessage(messageId));\r\n\t\t\t},\r\n\t\t\tonCancel() {\r\n\t\t\t\tconsole.log('Cancel');\r\n\t\t\t},\r\n\t\t});\r\n\t};\r\n\r\n\t//sorting messages on groups by create date\r\n\tconst sortedMessages: FormattedMessagesType = {};\r\n\r\n\tmessagesData?.forEach((messageData: MessageDataType) => {\r\n\t\t//@ts-ignore\r\n\t\tconst createMilisecs = messageData.createdAt?.seconds * 1000;\r\n\t\tconst createDate = new Date(createMilisecs || new Date().getTime());\r\n\t\tconst createDateString = createDate.toLocaleDateString();\r\n\r\n\t\tif(!sortedMessages[createDateString]) {\r\n\t\t\tsortedMessages[createDateString] = [];\r\n\t\t}\r\n\r\n\t\tsortedMessages[createDateString].push(messageData);\r\n\t});\r\n\r\n\t//on scroll listener\r\n\t// useEffect(() => {\r\n\t// \tconst handleScroll = () => {\r\n\t// \t\tconsole.log('onscroll');     \r\n\t// \t}\r\n\t// \tlistRef.current?.addEventListener('scroll', handleScroll);\r\n\r\n\t// \treturn () => {\r\n\t// \t\tlistRef.current?.removeEventListener('scroll', handleScroll);\r\n\t// \t}\r\n\t// }, []);\r\n\r\n\t//sorting messages in groups writed by 1 user in row\r\n\t//get unread messages count\r\n\tconst unreadCount = messagesData?.filter((data: MessageDataType) => {\r\n\t\tif(data.usersWhoRead) {\r\n\t\t\treturn !data.usersWhoRead.includes(loginData?.uid || null)\r\n\t\t}\r\n\t\treturn false;\r\n\t}).length;\r\n\r\n\tlet messagesList: JSX.Element[] | null = null;\r\n\r\n\t//set messages list\r\n\tif(messagesData) {\r\n\t\tlet messages: JSX.Element[] = []; // messages list\r\n\r\n\t\tObject.keys(sortedMessages).forEach(dateStr => {\r\n\r\n\t\t\tlet currMessages: JSX.Element[] = []; // curr date messages\r\n\t\t\tlet currGroupIndex = -1; // index of current filling group\r\n\t\t\tlet messagesGroups: MessagesGroupType[] = []; // groups of messages by 1 user in a row\r\n\r\n\t\t\t//set messages groups of 1 day\r\n\t\t\tsortedMessages[dateStr].map((data, i) => {\r\n\t\t\t\tconst prevUid = i > 0 ? sortedMessages[dateStr][i-1].uid : null;\r\n\t\t\t\tconst isShort: boolean = prevUid == data.uid;\r\n\t\t\t\tconst isMy = data.uid === loginData?.uid || null;\r\n\r\n\t\t\t\tconst currMessage = (\r\n\t\t\t\t\t<Message \r\n\t\t\t\t\t\tmessageData={data} myAccountId={loginData?.uid || ''} setEditMessageData={setEditMessageData}\r\n\t\t\t\t\t\tkey={`${data.createdAt}${data.uid}`} showDeleteConfirm={showDeleteConfirm} \r\n\t\t\t\t\t\topenInfoModal={setUsersWhoReadCurrMessage}  isShort={isShort}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\r\n\t\t\t\t//create new group\r\n\t\t\t\tif(!isShort) {\r\n\t\t\t\t\t//if not my, add user avatar, that writed these messages\r\n\t\t\t\t\tif(!isMy) {\r\n\t\t\t\t\t\tmessagesGroups.push({\r\n\t\t\t\t\t\t\tmessages: [],\r\n\t\t\t\t\t\t\tmetadata: {\r\n\t\t\t\t\t\t\t\tisMy: false,\r\n\t\t\t\t\t\t\t\tavatarData: {\r\n\t\t\t\t\t\t\t\t\tphotoUrl: data.photoUrl,\r\n\t\t\t\t\t\t\t\t\tuid: data.uid,\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t//add current message to new group\r\n\t\t\t\t\t\tmessagesGroups[currGroupIndex+1].messages.push(currMessage)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmessagesGroups.push({\r\n\t\t\t\t\t\t\tmessages: [currMessage],\r\n\t\t\t\t\t\t\tmetadata: {isMy: true}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcurrGroupIndex++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmessagesGroups[currGroupIndex].messages.push(currMessage);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t//data -> JSX.Element[]\r\n\t\t\tcurrMessages = messagesGroups.map(group => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<MessagesGroup metadata={group.metadata} listRef={listRef}>\r\n\t\t\t\t\t\t{group.messages}\r\n\t\t\t\t\t</MessagesGroup>\r\n\t\t\t\t)\t\r\n\t\t\t});\r\n\r\n\t\t\tconst addedElements = [\r\n\t\t\t\t<div className={classes.messagesDate}>{dateStr}</div>, \r\n\t\t\t\t...currMessages\r\n\t\t\t];\r\n\r\n\t\t\tmessages = [...messages, ...addedElements];\r\n\t\t});\r\n\r\n\t\tmessagesList = messages;\r\n\t}\r\n\r\n\t//get users еhat read curr message \r\n\tuseEffect(() => { \r\n\t\tconst getUsers = async () => {\r\n\t\t\tif(usersWhoReadCurrMessage) {\r\n\t\t\t\tsetIsUsersFetching(true);\r\n\t\t\t\tawait dispatch(setCurrMessageWhoReadList(usersWhoReadCurrMessage));\r\n\t\t\t\tsetIsUsersFetching(false);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tgetUsers();\r\n\t}, [usersWhoReadCurrMessage]);\r\n\r\n\t//set users who read current message components\r\n\tlet whoReadList: JSX.Element[] = [];\r\n\r\n\tconsole.log('users that read mesage', usersWhoReadCurrMessageData);\r\n\r\n\tif(usersWhoReadCurrMessageData) {\r\n\t\tusersWhoReadCurrMessageData.forEach(data => {\r\n\t\t\twhoReadList.push(<ReadMessageUser userData={data} />);\r\n\t\t});\r\n\t}\r\n\r\n\tconst closeModal = () => {\r\n\t\tsetUsersWhoReadCurrMessage(null);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={classes.Messages} ref={listRef}>\r\n\t\t\t{isFetching && <Preloader />}\r\n\r\n\t\t\t<Modal \r\n\t\t\t\ttitle='Переглянули'\r\n\t\t\t\topen={!!usersWhoReadCurrMessage}\r\n\t\t\t\tonCancel={() => closeModal()}\r\n\t\t\t\tfooter={null}\r\n\t\t\t>\r\n\t\t\t\t{whoReadList || 'Ваше повідомлення ніхто не прочитав'}\r\n\t\t\t</Modal>\r\n\r\n\t\t\t{!!messagesList?.length\r\n\t\t\t\t? \r\n\t\t\t\t\tmessagesList\r\n\t\t\t\t: <div>Немає повідомлень</div>\r\n\t\t\t}\r\n\r\n\t\t\t{listRef.current && !!messagesList?.length && \r\n\t\t\t<ScrollBottomBtn element={listRef.current} ref={ref} unreadCount={unreadCount || 0} />}\r\n\t\t</div>\r\n\t)\r\n});\r\n\r\nexport default Messages","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Chat_container__EuQus\",\"Chat\":\"Chat_Chat__qtwg3\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"NewMessageForm_container__uLUsq\",\"NewMessageForm\":\"NewMessageForm_NewMessageForm__yn-Kq\",\"textareaWrap\":\"NewMessageForm_textareaWrap__2SAy-\"};","import React, { ReactElement, useEffect, useRef, useState } from 'react';\r\n\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport TextArea from 'antd/lib/input/TextArea';\r\nimport classes from './NewMessageForm.module.scss';\r\nimport Preloader from '../../../UI/Preloader';\r\nimport { MessageDataType, UserType } from '../../../utils/types';\r\nimport { serverTimestamp } from 'firebase/firestore';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { editMessage, sendMessage } from '../../../Redux/chat/reducer';\r\nimport { AnyAction } from 'redux';\r\nimport { selectMyAccountData } from '../../../Redux/account/account-selectors';\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport { v1 } from 'uuid';\r\nimport { useAppDispatch } from '../../../Redux/store';\r\nimport { scrollElementToBottom } from '../../../utils/helpers/scrollElementToBottom';\r\nimport { Button, FormControl, IconButton, Textarea } from '@mui/joy';\r\nimport { message } from 'antd';\r\n\r\ntype PropsType = {\r\n\tauthData: UserType | null,\r\n\tisMessageEdit: boolean,\r\n\tcurrValue?: string, \r\n\tscrollBottomBtn: HTMLButtonElement | null,\r\n\tupdateMessage: (value: string) => void,\r\n}\r\n\r\ntype FieldValues = {\r\n\tmessage: string,\r\n}\r\n\r\nexport const NewMessageForm: React.FC<PropsType> = React.memo(({\r\n\tauthData, isMessageEdit, currValue, updateMessage, scrollBottomBtn\r\n}): ReactElement<any, any> => {\r\n\t//react-hook-form\r\n\tconst { control, formState: {errors}, handleSubmit, reset, setValue } = useForm<FieldValues>();\r\n\tconst [isSending, setIsSending] = useState<boolean>(false);\r\n\r\n\t//ant design form(щоб показувати зарашнє значення коментара) & reset formmessa\r\n\r\n\tconst accountData = useSelector(selectMyAccountData);\r\n\r\n\t//for autofocus\r\n\tconst messageField = useRef<HTMLDivElement>(null);\r\n\tlet textareaEl: HTMLTextAreaElement | null | undefined = null;\r\n\r\n\tuseEffect(() => {\r\n\t\tif(messageField) {\r\n\t\t\t//fignyaaaaaaaa \r\n\t\t\t// DELETE THISSSS! IS`S GIVNOCODE\r\n\t\t\t//ale pobachymo\r\n\t\t\ttextareaEl = messageField.current?.querySelector('textarea');\r\n\t\t}\r\n\t}, [messageField]);\r\n\r\n\tconsole.log('message ref', messageField);\r\n\r\n\tconst dispatch = useAppDispatch();\r\n\r\n\tconst onSubmit = async (data: FieldValues) => {\r\n\t\tconsole.log('submit data', data);\r\n\t \tif(!isMessageEdit) {\r\n\t\t\tsetIsSending(true);\r\n\t\t\tawait addMessage(data.message);\r\n\t\t\tsetIsSending(false);\r\n\t\t\tif(scrollBottomBtn) {\r\n\t\t\t\t//for in MEssages changed will apply\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tconsole.log('cliked!');\r\n\t\t\t\t\tscrollBottomBtn.click()\r\n\t\t\t\t}, 300);\r\n\t\t\t}\r\n\t\t} else  {\r\n\t\t\tsetIsSending(true);\r\n\t\t\tawait updateMessage(data.message);\r\n\t\t\tsetIsSending(false);\r\n\t\t}\r\n\r\n\t\treset();\r\n\t};\r\n\r\n\t//for edit\r\n\tuseEffect(() => {\r\n\t\t//set for antd textarea\r\n\t\t//form.setFieldValue('message', currValue);\r\n\t\t//set focus on the message field\r\n\t\tif(textareaEl && isMessageEdit) {\r\n\t\t\ttextareaEl.focus();\r\n\t\t}\r\n\t\t//set to react-hook-form value\r\n\t\tsetValue('message', currValue || '');\r\n\t}, [currValue]);\r\n\r\n\tconst addMessage = async (newMessage: string) => {\r\n\t\tconst newMessageData: MessageDataType = {\r\n\t\t\tuid: authData?.uid || 'undefined',\r\n\t\t\tdisplayName: `${accountData?.surname} ${accountData?.name}` || 'Анонім',\r\n\t\t\tphotoUrl: accountData?.avatarUrl || '',\r\n\t\t\ttext: newMessage,\r\n\t\t\tcreatedAt: serverTimestamp(),\r\n\t\t\tid: v1(),\r\n\t\t\tusersWhoRead: [authData?.uid || null],\r\n\t\t\tedited: false,\r\n\t\t\treceived: false,\r\n\t\t}\r\n\r\n\t\treset();\r\n\t\tawait dispatch(sendMessage(newMessageData));\r\n\t\tif(textareaEl) textareaEl.value = '';\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form className={classes.NewMessageForm} onSubmit={handleSubmit(onSubmit)}>\r\n\t\t\t<Controller\r\n\t\t\t\tname='message'\r\n\t\t\t\tcontrol={control}\r\n\t\t\t\tdefaultValue={currValue}\r\n\t\t\t\trender={({field: {onChange, value}}) => (\r\n\t\t\t\t\t<FormControl className={classes.textareaWrap} >\r\n\t\t\t\t\t\t<Textarea\r\n\t\t\t\t\t\t\tvalue={value}\r\n\t\t\t\t\t\t\tonChange={onChange} \r\n\t\t\t\t\t\t\tcomponent={FormControl}\r\n\t\t\t\t\t\t\tplaceholder='Ваше повідомлення'\r\n\t\t\t\t\t\t\tsize='lg'\r\n\t\t\t\t\t\t\tref={messageField}\r\n\t\t\t\t\t\t\tsx={{minWidth: '100%' }}\r\n\t\t\t\t\t\t\tendDecorator={\t\t\r\n\t\t\t\t\t\t\t\t<IconButton color='primary' type='submit' className={classes.sendBtn}> \r\n\t\t\t\t\t\t\t\t\t<SendIcon />\r\n\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</FormControl>\r\n\t\t\t\t)} \r\n\t\t\t/>\r\n\t\t</form>\r\n\t)\r\n});\r\n\r\n","import React, { useContext, useEffect, useRef, useState } from 'react'\r\nimport { useAuthState } from 'react-firebase-hooks/auth'\r\nimport { Navigate } from 'react-router-dom';\r\nimport { FirebaseContext } from '../..';\r\nimport Messages from './Messages';\r\nimport classes from './Chat.module.scss';\r\nimport { NewMessageForm } from './NewMessageForm';\r\nimport { Auth } from 'firebase/auth';\r\nimport { MessageDataType } from '../../utils/types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectMessages } from '../../Redux/chat/selectors';\r\nimport { editMessage, startMessaging, stopMessaging } from '../../Redux/chat/reducer';\r\nimport { AnyAction } from 'redux';\r\nimport Preloader from '../../UI/Preloader';\r\nimport { useAppDispatch } from '../../Redux/store';\r\n\r\nexport type EditMessageDataType = {\r\n\tvalue: string,\r\n\tid: string,\r\n}\r\n\r\nconst Chat = () => {\r\n\tconst { auth } = useContext(FirebaseContext);\r\n\tconst [authData] = useAuthState(auth as Auth);\r\n\r\n\t//is exists messages now editing\r\n\tconst [isEdit, setIsEdit] = useState<boolean>(false);\r\n\tconst [editMessageData, setEditMessageData] = useState<EditMessageDataType | undefined>(undefined);\r\n\r\n\r\n\t//messages list ref\r\n\tconst scrollBtnRef = useRef<HTMLButtonElement>(null);\r\n\tconsole.log('edit message data', editMessageData);\r\n\r\n\tconst dispatch = useAppDispatch();\r\n\r\n\tconst sendUpdatedMessage = (value: string) => {\r\n\t\tif(editMessageData?.id) {\r\n\t\t\tsetIsEdit(false);\r\n\t\t\tsetEditMessageData(undefined);\r\n\t\t\tdispatch(editMessage(editMessageData.id, value));\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(startMessaging());\r\n\t}, []);\r\n\r\n\r\n\tif(!authData) return <Navigate to='/login' replace={true}/>\t\r\n\r\n\tconsole.log('edit messag data', editMessageData);\r\n\r\n\treturn (\r\n\t\t<div className={classes.Chat}>\r\n\t\t\t<Messages ref={scrollBtnRef} setEditMessageData={(data: EditMessageDataType) => {\r\n\t\t\t\tsetEditMessageData(data);\r\n\t\t\t\tsetIsEdit(true);\r\n\t\t\t\tconsole.log('set edit message data', data);\r\n\t\t\t}}/>\r\n\t\t\t<NewMessageForm \r\n\t\t\t\tauthData={authData} scrollBottomBtn={scrollBtnRef.current} isMessageEdit={isEdit} \r\n\t\t\t\tupdateMessage={sendUpdatedMessage} currValue={editMessageData?.value}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Chat","export const addZero = (num: number) => {\r\n\treturn num < 10 ? `0${num}` : num;\r\n}"],"names":["selectMessages","state","messages","messagesData","selectIsMessagesFetching","isFetching","selectCurrMessageWhoReadList","currMessageWhoReadList","ScrollBottomBtn","React","ref","element","unreadCount","scrollToBottomHeight","scrollHeight","clientHeight","remainingScroll","scrollTop","useState","isBottom","setIsBottom","isShowing","setIsShowing","prevElScroll","addEventListener","debounce","e","currScroll","isInBottom","className","classes","onClick","value","console","log","scrollTo","behavior","top","scrollElementToBottom","ArrowDownOutlined","Text","Typography","DeleteMessageOption","showDeleteConfirm","messageId","type","messageData","myAccountId","setEditMessageData","openInfoModal","isShort","text","uid","photoUrl","id","usersWhoRead","createdAt","displayName","received","edited","useInView","threshold","observerRef","inView","dispatch","entry","useAppDispatch","includes","markMessageAsRead","isMy","createdAtMilisecs","seconds","sendDate","Date","getTime","sendTime","addZero","getHours","getMinutes","contextMenu","items","label","key","overlay","trigger","CheckCircleOutlined","ReadMessageUser","userData","name","surname","avatarUrl","src","icon","UserOutlined","size","MessagesGroup","metadata","children","listRef","Messages","useSelector","loginData","selectMyLoginData","usersWhoReadCurrMessage","setUsersWhoReadCurrMessage","usersWhoReadCurrMessageData","setIsUsersFetching","useRef","confirm","title","ExclamationCircleOutlined","content","okText","okType","cancelText","onOk","deleteMessage","onCancel","sortedMessages","forEach","createMilisecs","createDateString","toLocaleDateString","push","filter","data","length","messagesList","Object","keys","dateStr","currMessages","currGroupIndex","messagesGroups","map","i","currMessage","avatarData","group","addedElements","useEffect","getUsers","setCurrMessageWhoReadList","whoReadList","Preloader","open","footer","current","NewMessageForm","authData","isMessageEdit","currValue","updateMessage","scrollBottomBtn","useForm","control","handleSubmit","formState","errors","reset","setValue","setIsSending","accountData","selectMyAccountData","messageField","textareaEl","querySelector","onSubmit","addMessage","message","setTimeout","click","focus","newMessage","newMessageData","serverTimestamp","v1","sendMessage","defaultValue","render","field","onChange","FormControl","Textarea","component","placeholder","sx","minWidth","endDecorator","IconButton","color","Send","auth","useContext","FirebaseContext","useAuthState","isEdit","setIsEdit","undefined","editMessageData","scrollBtnRef","startMessaging","editMessage","to","replace","num"],"sourceRoot":""}