{"version":3,"file":"static/js/519.3e07bc79.chunk.js","mappings":"sQAEaA,EAAiB,SAACC,GAC9B,OAAOA,EAAMC,SAASC,YACtB,EAEYC,EAA2B,SAACH,GACxC,OAAOA,EAAMC,SAASG,UACtB,EAEYC,EAA+B,SAACL,GAC5C,OAAOA,EAAMC,SAASK,sBACtB,E,qBCXD,GAAgB,UAAY,2BAA2B,YAAc,6BAA6B,SAAW,0BAA0B,cAAgB,+BAA+B,QAAU,yBAAyB,OAAS,wBAAwB,YAAc,6BAA6B,SAAW,0BAA0B,KAAO,sBAAsB,KAAO,sBAAsB,WAAa,4BAA4B,eAAiB,gCAAgC,KAAO,sBAAsB,OAAS,wBAAwB,IAAM,sB,kECE1hBC,EAASC,EAAAA,EAAAA,KAQJC,EAA2C,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,kBAAmBC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,UACvF,OACC,SAACL,EAAD,CACCM,QAAS,kBAAMH,EAAkBE,EAAxB,EACTE,KAAK,SAASH,UAAWA,EAF1B,6DAKD,E,8FCgJD,EApIgBI,EAAAA,YAA4C,WAEzDC,GAAS,IADXC,EACU,EADVA,YAAaC,EACH,EADGA,YAAaR,EAChB,EADgBA,kBAAmBS,EACnC,EADmCA,mBAAoBC,EACvD,EADuDA,cAAeC,EACtE,EADsEA,QAExEC,EAAmFL,EAAnFK,KAAgBC,GAAmEN,EAA7EO,SAA6EP,EAAnEM,KAAKE,EAA8DR,EAA9DQ,GAAIC,EAA0DT,EAA1DS,aAAcC,EAA4CV,EAA5CU,UAAWC,EAAiCX,EAAjCW,YAAaC,EAAoBZ,EAApBY,SAAUC,EAAUb,EAAVa,OAE3EC,GAAUC,EAAAA,EAAAA,QAAuB,MAGvC,GAA4CC,EAAAA,EAAAA,IAAU,CACrDC,UAAW,KADCC,EAAb,EAAQnB,IAAkBoB,EAA1B,EAA0BA,OAIpBC,GAJN,EAAkCC,OAIjBC,EAAAA,EAAAA,MAGdH,IAAWV,EAAac,SAAStB,IACnCmB,GAASI,EAAAA,EAAAA,IAAkBhB,EAAIP,IAIhC,IAAMwB,EAAOnB,IAAQL,EAGfyB,EAAyC,KAAZ,OAAThB,QAAS,IAATA,OAAA,EAAAA,EAAWiB,SAC/BC,EAAW,IAAIC,KAAKH,IAAqB,IAAIG,MAAOC,WAEpDC,EAAQ,WAAMC,EAAAA,EAAAA,GAAQJ,EAASK,YAAvB,aAAsCD,EAAAA,EAAAA,GAAQJ,EAASM,eA6BrE,OACC,gBAAKxC,UAAS,UAAKyC,EAAAA,QAAL,YAAwBV,GAAQU,EAAAA,KAAepC,IAAKmB,EAAlE,UAQC,SAAC,KAAD,CAAYkB,QAAQ,UAAUC,QAAQ,kBAAtC,SACG,SAACC,GAAD,OACD,iCACA,oCAASC,EAAAA,EAAAA,IAAYD,IAArB,IAAkC5C,UAAWyC,EAAAA,YAAqBpC,IAAKA,EAAvE,WACGK,IAAYqB,IAAQ,eAAI/B,UAAWyC,EAAAA,SAAf,SAAkCxB,KACxD,cAAGjB,UAAWyC,EAAAA,KAAd,SAA6B9B,KAC7B,iBAAKX,UAAWyC,EAAAA,KAAhB,UACEtB,IAAU,cAAGnB,UAAWyC,EAAAA,OAAd,yDAEX,cAAGzC,UAAWyC,EAAAA,WAAd,SAAmCJ,IAElCN,IAAQ,cAAG/B,UAAWyC,EAAAA,eAAd,SACPvB,GACC,SAAC4B,EAAA,EAAD,CAAqB9C,UAAWyC,EAAAA,QAChC,SAACM,EAAA,EAAD,CAAkB/C,UAAWyC,EAAAA,iBAIlC,SAACO,EAAA,IAAD,mBACKC,EAAAA,EAAAA,IAAYL,IADjB,IAGC1C,QAAS,SAACgD,GACMA,EAAEC,SACkB/B,EAAQgC,SAG1CR,EAAWS,OAEZ,EACDC,aAAc,CACbC,SAAU,SACVC,WAAY,UAEbC,gBAAiB,CAChBF,SAAU,MACVC,WAAY,UAjBd,UAoBC,UAACE,EAAA,GAAD,mBAAUC,EAAAA,EAAAA,IAASf,IAAnB,IAAgCvC,IAAKe,EAASpB,UAAWyC,EAAAA,YAAzD,UACEV,IACA,+BACC,SAAC6B,EAAA,EAAD,CAAU1D,QAAS,WAClBM,EAAmB,CAACqD,MAAOlD,EAAMG,GAAAA,GACjC,EAAEd,UAAWyC,EAAAA,SAFd,6EAKF,SAACmB,EAAA,EAAD,CAAU1D,QAAS,WAClBO,EAAcM,EACd,EAAEf,UAAWyC,EAAAA,SAFd,0EAICV,IACA,SAAC6B,EAAA,EAAD,CAAU5D,UAAWyC,EAAAA,UAArB,UACC,SAAC3C,EAAD,CACCE,UAAW8D,IAAGrB,EAAAA,cAAuBA,EAAAA,UACrC1C,kBAAmBA,EACnBE,UAAWK,EAAYQ,gBAtD3B,KAiEL,IC/JD,EAAmE,2BAAnE,EAA6G,+BCA7G,GAAgB,UAAY,mCAAmC,gBAAkB,yCAAyC,KAAO,+B,sBCSpHiD,EAAuC,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAC7CC,EAA6BD,EAA7BC,KAAMC,EAAuBF,EAAvBE,QAASC,EAAcH,EAAdG,UAEvB,OACC,iBAAKnE,UAAWyC,EAAAA,gBAAhB,WACC,SAAC,IAAD,CAAQzC,UAAWyC,EAAAA,OAAgB2B,IAAKD,EAAWE,MAAM,SAACC,EAAA,EAAD,IAAkBC,KAAM,MACjF,eAAGvE,UAAWyC,EAAAA,KAAd,UAA6BwB,EAA7B,IAAoCC,OAGtC,E,WClBD,EAA6E,qCAA7E,EAA2H,8BAA3H,EAAoK,gC,WCavJM,EAAqC,SAAC,GAAmC,IAAD,IAAjCC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,SAAuB,EAAbC,QACvE,OACC,iBAAK3E,UAAWyC,EAAhB,WACGgC,EAAS1C,OACV,gBAAK/B,UAAWyC,EAAhB,UACC,SAAC,KAAD,CAAMmC,GAAE,oBAAc,UAAAH,EAASI,kBAAT,eAAqBjE,MAAO,IAAlD,UACC,SAACkE,EAAA,EAAD,CACCV,KAAK,UAAAK,EAASI,kBAAT,eAAqBhE,gBAAYkE,EACtC/E,UAAWyC,SAKf,gBAAKzC,UAAWyC,EAAhB,SACEiC,MAIJ,E,4CClBYM,EAAqC,SAAC,GAAmD,IAAlD7B,EAAiD,EAAjDA,OAAQ8B,EAAyC,EAAzCA,OAAkBC,GAAuB,EAAjCC,SAAiC,EAAvBD,UAAUE,EAAa,EAAbA,QASvF,OACC,UAACC,EAAA,EAAD,CACMC,KAAML,EACNG,QAASA,EACT,kBAAgB,qBAChB,mBAAiB,2BAJvB,WAMM,SAACG,EAAA,EAAD,CAAazE,GAAG,qBAAhB,2JACgCqC,EADhC,QAGA,UAACqC,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,CAAQ/C,QAAQ,WAAWxC,QAfd,WACnBkF,GACD,EAaO,qEACA,SAACK,EAAA,EAAD,CAAQ/C,QAAQ,WAAWgD,MAAM,SAASxF,QApB7B,WACnBgF,IACAE,GACD,EAiBwEO,WAAS,EAA1E,mEAMT,E,YCxCD,IAAgB,UAAY,sCAAsC,OAAS,mCAAmC,YAAc,wCAAwC,QAAU,oCAAoC,SAAW,sC,yECQvNC,IAAkBC,EAAAA,GAAAA,IAAOR,EAAAA,EAAPQ,EAAe,gBAAGC,EAAH,EAAGA,MAAH,MAAgB,CACrD,2BAA4B,CAC1BC,QAASD,EAAME,QAAQ,IAEzB,2BAA4B,CAC1BD,QAASD,EAAME,QAAQ,IALY,IAsBjCC,GAAmD,SAAC,GAAmC,IAAlCvB,EAAiC,EAAjCA,SAAUU,EAAuB,EAAvBA,QAAYc,GAAW,cAC1F,OACE,UAACX,EAAA,GAAD,gBAAaY,GAAI,CAAEC,EAAG,EAAGC,EAAG,IAASH,GAArC,IAA4ClG,UAAWyC,GAAAA,YAAvD,UACGiC,EACAU,GACC,SAACkB,GAAA,EAAD,CACE,aAAW,QACXpG,QAASkF,EACfpF,UAAWyC,GAAAA,SACL0D,GAAI,CACFI,SAAU,WACVC,MAAO,EACPC,IAAK,GAPT,UAUE,SAACC,GAAA,EAAD,CAAW1G,UAAWyC,GAAAA,SAEtB,QAGT,EAEYkE,GAAyC,SAAC,GAAiC,IAAhCjC,EAA+B,EAA/BA,SAAUU,EAAqB,EAArBA,QAASwB,EAAY,EAAZA,OACzE,OACI,UAAChB,GAAD,CACER,QAASA,EACT,kBAAgB,0BAChBE,KAAMsB,EACV5G,UAAWyC,GAAAA,OAJT,WAME,SAACwD,GAAD,CAAsBnF,GAAG,0BAA0BsE,QAASA,EAA5D,iFAGA,SAACyB,GAAA,EAAD,CAAeC,UAAQ,EAAC9G,UAAWyC,GAAAA,QAAnC,SACGiC,MAIV,E,sBCHKqC,GAAW3G,EAAAA,YAA+C,WAAqCC,GAAS,IAA5CG,EAA2C,EAA3CA,mBAAoBjB,EAAuB,EAAvBA,aAC/EE,GAAauH,EAAAA,EAAAA,IAAYxH,GACzByH,GAAgBD,EAAAA,EAAAA,IAAYE,EAAAA,IAC5BC,GAA8BH,EAAAA,EAAAA,IAAYtH,GAEhD,GAA8D0H,EAAAA,EAAAA,UAAyC,MAAvG,eAAOC,EAAP,KAAgCC,EAAhC,KACA,GAA8CF,EAAAA,EAAAA,WAAkB,GAAhE,eAAwBG,GAAxB,WACA,GAAwCH,EAAAA,EAAAA,UAA+B,MAAvE,eAAOI,EAAP,KAAqBC,EAArB,KACA,GAAgDL,EAAAA,EAAAA,UAA2B7H,GAA3E,eACA,GADA,WACoC6H,EAAAA,EAAAA,UAAwB,KAA5D,eAAmBM,GAAnB,WACA,GAAsDN,EAAAA,EAAAA,UAAwB,MAA9E,eAAOO,EAAP,KAA4BC,EAA5B,KAEMjD,GAAUtD,EAAAA,EAAAA,QAAuB,MACjCwG,GAAexG,EAAAA,EAAAA,QAAuB,MAEtCK,GAAWE,EAAAA,EAAAA,KAGX7B,EAAoB,SAACE,GAC1B2H,EAAuB3H,EACvB,EACK6H,EAAe,WACpBF,EAAuB,KACvB,GAQDG,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACTC,EAAe,WACpBC,QAAQC,IAAI,WACZ,EAGD,OAFA,UAAAvD,EAAQvB,eAAR,SAAiB+E,iBAAiB,UAAUC,EAAAA,GAAAA,UAASJ,EAAc,MAE5D,WAAO,IAAD,EACZ,UAAArD,EAAQvB,eAAR,SAAiBiF,oBAAoB,SAAUL,EAC/C,CACD,GAAE,CAACrD,EAAQvB,WAGZ2E,EAAAA,EAAAA,YAAU,WACNF,EAAazE,SACfyE,EAAazE,QAAQkF,eAAe,CACnCC,SAAU,QAGZ,GAAE,CAACV,EAAazE,WAGjB2E,EAAAA,EAAAA,YAAU,WAET,IAAIzI,EAA0B,GAIxBkJ,EA7EwB,SAACjJ,GAChC,IAAMiJ,EAAwC,CAAC,EAe/C,OAbAjJ,EAAakJ,SAAQ,SAACnI,GAAkC,IAAD,EAEhDoI,EAAkD,KAAjC,UAAApI,EAAYU,iBAAZ,eAAuBiB,SACxC0G,GAAmBC,EAAAA,GAAAA,GAAcF,IAAkB,IAAIvG,MAAOC,WAEhEoG,EAAeG,KAClBH,EAAeG,GAAoB,IAGpCH,EAAeG,GAAkBE,KAAKvI,EACtC,IAGMkI,CACP,CA4D+CM,CAAwBvJ,GAEtEwJ,OAAOC,KAAKR,GAAgBC,SAAQ,SAAAQ,GACnC,IAAIC,EACAC,GAAkB,EAClBC,EAAsC,GAEtCC,EAAgC,GAGpCb,EAAeS,GAASK,KAAI,SAACC,EAAMC,GAClC,IACM9I,GADU8I,EAAI,EAAIhB,EAAeS,GAASO,EAAE,GAAG5I,IAAM,OACvB2I,EAAK3I,IACnCmB,EAAOwH,EAAK3I,OAAL,OAAaqG,QAAb,IAAaA,OAAb,EAAaA,EAAerG,MAAO,KAE1C6I,GACL,SAAC,EAAD,CACCnJ,YAAaiJ,EACbhJ,aAA0B,OAAb0G,QAAa,IAAbA,OAAA,EAAAA,EAAerG,MAAO,GACnCJ,mBAAoBA,EAEpBT,kBAAmBA,EACnBU,cAAe6G,EACf5G,QAASA,EACTL,IAAKwH,GARN,UAIS0B,EAAKvI,WAJd,OAI0BuI,EAAK3I,MAS7BmB,IACFsH,EAAc,kBAAOA,GAAP,CAAuBI,KAIlC/I,EAuBH0I,EAAeD,GAAgB7J,SAASuJ,KAAKY,IArBzC1H,EAcHqH,EAAeP,KAAK,CACnBvJ,SAAU,CAACmK,GACXhF,SAAU,CAAC1C,MAAM,MAflBqH,EAAeP,KAAK,CACnBvJ,SAAU,GACVmF,SAAU,CACT1C,MAAM,EACN8C,WAAY,CACXhE,SAAU0I,EAAK1I,SACfD,IAAK2I,EAAK3I,QAKbwI,EAAeD,EAAe,GAAG7J,SAASuJ,KAAKY,IAOhDN,IAID,IAGDD,EAAeE,EAAeE,KAAI,SAAAI,GACjC,OACC,SAAClF,EAAD,CAAeC,SAAUiF,EAAMjF,SAAUE,QAASA,EAAlD,SACE+E,EAAMpK,UAGT,IAED,IAAMqK,EAAa,EAClB,gBAAK3J,UAAWyC,EAAhB,SAAuCwG,KADrB,eAEfC,IAGJxB,GAAc,SAACkC,GAAD,wBAAsBA,IAAtB,OAAuCP,GAAvC,IAEd/J,EAAQ,kBAAOA,IAAP,OAAoBqK,GAC5B,IAEDlC,EAAgBnI,EAChB,GAAE,CAAC2H,EAAe1H,KAGnBwI,EAAAA,EAAAA,YAAU,WACT,IAAM8B,EAAQ,yCAAG,uFACbxC,EADa,uBAEfE,GAAmB,GAFJ,SAGT7F,GAASoI,EAAAA,EAAAA,IAA0BzC,IAH1B,OAIfE,GAAmB,GAJJ,2CAAH,qDAOdsC,GACA,GAAE,CAACxC,IAGJ,IAAI0C,EAA6B,GAE9B5C,GAEFA,EAA4BsB,SAAQ,SAAAc,GACnCQ,EAAYlB,MAAK,SAAC9E,EAAD,CAAiBC,SAAUuF,IAC5C,IAoIF,OAAItC,GAGH,iBAAKjH,UAAWyC,EAAkBpC,IAAKsE,EAAvC,UACElF,IAAc,SAACuK,EAAA,EAAD,KAEf,SAAC,GAAD,CACCpD,SAAUS,EACVjC,QAzIgB,WAClBkC,EAA2B,KAC3B,EAqIC,SAIEyC,GAAe,oMAGjB,SAAC/E,EAAD,CACC7B,OAAO,wFACP8B,SAAU0C,EACVxC,SAAU2C,EACV5C,SA7RgB,WACfyC,GACFjG,GAASuI,EAAAA,EAAAA,IAActC,GAExB,EA0REvC,QAAS0C,IAGPN,GAAgBA,EAAY,OAAa,EAE1CA,GACC,mIAxBqB,SAACwC,EAAA,EAAD,GA4B1B,IAED,MCnYA,GAA2D,mB,YCA3D,IAAgB,UAAY,kCAAkC,eAAiB,uCAAuC,aAAe,sC,kFC+BxHE,GAAsC9J,EAAAA,MAAW,YAE/B,IAD9B+J,EAC6B,EAD7BA,SAAUC,EACmB,EADnBA,cAAeC,EACI,EADJA,UAAWC,EACP,EADOA,cAAeC,EACtB,EADsBA,gBAGnD,GAAiGC,EAAAA,GAAAA,MAAzFC,EAAR,EAAQA,QAAR,IAAiBC,UAAYC,EAA7B,EAA6BA,OAAkBC,GAA/C,EAAqCC,QAArC,EAA+CD,cAAcE,EAA7D,EAA6DA,MAAOC,EAApE,EAAoEA,SAAUC,EAA9E,EAA8EA,QAASC,EAAvF,EAAuFA,MACvF,GAAkC7D,EAAAA,EAAAA,WAAkB,GAApD,eAAkB8D,GAAlB,WACA,GAAkC9D,EAAAA,EAAAA,WAAkB,GAApD,eACA,GADA,WAC8CA,EAAAA,EAAAA,WAAkB,IAAhE,eAAO+D,EAAP,KAAwBC,EAAxB,KACA,GAAsChE,EAAAA,EAAAA,WAAkB,GAAxD,eAAOiE,EAAP,KAAoBC,EAApB,KACA,GAAoClE,EAAAA,EAAAA,UAAqC,MAAzE,eAAOmE,EAAP,KAAmBC,EAAnB,KAIMC,GAAczE,EAAAA,EAAAA,IAAYE,EAAAA,IAG1BwE,GAAerK,EAAAA,EAAAA,QAAuB,MACtCsK,GAAUtK,EAAAA,EAAAA,QAAwB,OAGxC0G,EAAAA,EAAAA,YAAU,WACN2D,EAAatI,UAIfoI,EAAcE,EAAatI,QAAQwI,cAAc,aACjD3D,QAAQC,IAAI,kBAEb,GAAE,IAEH,IAAMxG,GAAWE,EAAAA,EAAAA,KAEXiK,EAAQ,yCAAG,WAAOtC,GAAP,yEAChBtB,QAAQC,IAAI,cAAeqB,GACvB8B,GAAaC,GAAe,GAC3BlB,EAHW,wBAIfc,GAAa,GAJE,SAKTY,EAAWvC,EAAKwC,SALP,OAMfb,GAAa,GACVX,GAEFyB,YAAW,WACV/D,QAAQC,IAAI,WACZqC,EAAgB0B,OAChB,GAAE,KAZW,+BAeff,GAAa,GAfE,UAgBTZ,EAAcf,EAAKwC,SAhBV,QAiBfb,GAAa,GAjBE,QAqBbK,IAAYA,EAAW1H,MAAQ,IAClCkH,EAAS,UAAW,GAAI,CAACmB,gBAAgB,IAtBzB,4CAAH,uDA0BdnE,EAAAA,EAAAA,YAAU,WAETE,QAAQC,IAAI,sCAAuCqD,EAAYnB,GAC5DmB,GAAcnB,GAChBmB,EAAWY,OAIZ,GAAE,CAAC/B,KAEJrC,EAAAA,EAAAA,YAAU,WACTgD,EAAS,UAAWV,GAAa,GACjC,GAAE,CAACA,IAGJ,IAAMyB,EAAU,yCAAG,WAAOM,GAAP,mFACZC,EAAkC,CACvCzL,KAAa,OAARuJ,QAAQ,IAARA,OAAA,EAAAA,EAAUvJ,MAAO,YACtBK,YAAa,iBAAGwK,QAAH,IAAGA,OAAH,EAAGA,EAAavH,QAAhB,mBAA2BuH,QAA3B,IAA2BA,OAA3B,EAA2BA,EAAaxH,OAAU,uCAC/DpD,UAAqB,OAAX4K,QAAW,IAAXA,OAAA,EAAAA,EAAatH,YAAa,GACpCxD,KAAMyL,EACNpL,WAAWsL,EAAAA,GAAAA,MACXxL,IAAIyL,EAAAA,GAAAA,KACJxL,aAAc,EAAS,OAARoJ,QAAQ,IAARA,OAAA,EAAAA,EAAUvJ,MAAO,MAChCO,QAAQ,EACRD,UAAU,GAGX4J,IAbkB,SAcZpJ,GAAS8K,EAAAA,EAAAA,IAAYH,IAdT,OAefd,IAAYA,EAAW1H,MAAQ,IAfhB,2CAAH,uDAmBhBkE,EAAAA,EAAAA,YAAU,WACT,GAAG4D,EAAQvI,QAAS,CACnB,IAAMqJ,EAAad,EAAQvI,QAAQsJ,aAEnCzE,QAAQC,IAAI,aAAcuE,GAE1B/K,GAASiL,EAAAA,GAAAA,IAAqBF,GAC9B,CACD,GAAE,KAGH1E,EAAAA,EAAAA,YAAU,WACLsD,IACHpD,QAAQC,IAAI,WACZ8C,EAAQ,WAET,GAAE,CAACC,EAAM,aAEV,IAAM2B,EAAmBzB,IAAoBf,GAAiBe,IAAmBf,IAAiBO,EAAOoB,QAEzG,OACC,iBAAM/L,UAAWyC,GAAAA,eAAwBoJ,SAAUjB,EAAaiB,GAAWxL,IAAKsL,EAAhF,UACC,SAAC,MAAD,CACC1H,KAAK,UACLwG,QAASA,EACToC,MAAO,CACNC,SAAU,6HACVC,UAAW,CAAClJ,MAAO,EAAGkI,QAAS,8HAC/BiB,UAAW,CAACnJ,MAAO,IAAKkI,QAAS,2IAElCkB,aAAc5C,EACd6C,OAAQ,oBAAEC,MAAQC,EAAV,EAAUA,SAAUvJ,EAApB,EAAoBA,MAApB,OACP,SAACwJ,GAAA,EAAD,CAAarN,UAAWyC,GAAAA,aAAxB,UACC,SAAC6K,GAAA,EAAD,CACCzJ,MAAOA,EAIPoJ,aAAc5C,EACd+C,SAAU,SAAClK,GACVkK,EAASlK,GACNiI,GAAiBC,GAAmB,EACvC,EACDmC,UAAWF,GAAAA,EACXG,YAAY,oGACZjJ,KAAK,KACLlE,IAAKqL,EACLvF,GAAI,CAACsH,SAAU,QACfC,aAAed,IACd,SAAC,MAAD,CAAYlH,MAAM,UAAUvF,KAAK,SAASH,UAAWyC,GAAAA,QAArD,UACC,SAACkL,GAAA,EAAD,SAnBG,KA4BX,I,YCtLD,GAAiF,yCAAjF,GAAoI,iCAApI,GAA6K,+BAA7K,GAA0N,qCAA1N,GAAsQ,8BCWzPC,GAAkBxN,EAAAA,YAA+C,WAAyBC,GAAS,IAAhCwN,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,YAClFC,EAAOC,SAASD,KAEhBE,EAAuBF,EAAKG,aAAeH,EAAKI,aAChDC,EAAkBL,EAAKG,cAAgBL,EAAQQ,UAAYR,EAAQM,cACzE,GAAiC/G,EAAAA,EAAAA,UAAkBgH,EAAkB,KAArE,eAAOE,EAAP,KAAiBC,EAAjB,KACA,GAAkCnH,EAAAA,EAAAA,WAAkB,GAApD,eAAOoH,EAAP,KAAkBC,EAAlB,KACA,GAAoCrH,EAAAA,EAAAA,UAAiB6G,GAArD,eAAOS,EAAP,KAAmBC,EAAnB,MAEA5G,EAAAA,EAAAA,YAAU,WACT,IAAM6G,GAAmBxG,EAAAA,GAAAA,WAAS,SAAClF,GAClC,IAAI2L,EAAaC,OAAOC,QAClBC,EAAajB,EAAKG,cAAgBW,EAAad,EAAKI,cAAgB,IAC1EI,EAAYS,GACZ/G,QAAQC,IAAI,eAAgB8G,EAAY,cAAeR,GAEpDK,EAAaH,IAAeM,EAC9BP,GAAa,GACJI,EAAaH,GACtBD,GAAa,GAGdE,EAAcE,EACd,GAAE,IAKH,OAFAC,OAAO3G,iBAAiB,SAAUyG,GAE3B,WACNE,OAAOzG,oBAAoB,SAAUuG,EACrC,CACD,GAAE,CAACf,IAWJ,OACC,gBAAK7N,UAAS,UAAKyC,GAAL,YAAgC6L,IAAaE,EAAY/L,GAAkB,IAAzF,UACC,oBAAQpC,IAAKA,EAAKL,UAAWyC,GAAevC,QAVzB,YC9Ce,SAAC2N,EAAyBhK,GAC9DoE,QAAQC,IAAI,4BAA6BrE,GAEzC,IAAIoK,EAAuB,EACvBpK,IACHoK,EAAuBJ,EAAQK,aAAeL,EAAQM,cAEvDN,EAAQoB,SAAS,CAChB1G,SAAU,SACV9B,IAAK5C,GAASoK,GAEf,CDoCCiB,CAAsBrB,EAASI,GAC/Ba,OAAOG,SAAS,CACfxI,IAAKwH,IAENhG,QAAQC,IAAI,UACZ,EAIC,UACE4F,EAAc,IAAK,gBAAK9N,UAAWyC,GAAhB,SAClBqL,KAEF,SAACqB,GAAA,EAAD,CAAmBnP,UAAWyC,SAIjC,IE+CD,GAxFa,WACZ,IAAQ2M,GAASC,EAAAA,EAAAA,YAAWC,EAAAA,GAApBF,KACR,GAAmBG,EAAAA,EAAAA,IAAaH,GAAzBjF,GAAP,eAEM5K,GAAeyH,EAAAA,EAAAA,IAAY5H,GAC3B6H,GAAgBD,EAAAA,EAAAA,IAAYE,EAAAA,IAGlC,GAA4BE,EAAAA,EAAAA,WAAkB,GAA9C,eAAOoI,EAAP,KAAeC,EAAf,KACA,GAA8CrI,EAAAA,EAAAA,UAAqC,MAAnF,eAAOsI,EAAP,KAAwBlP,EAAxB,KACA,GAAkC4G,EAAAA,EAAAA,WAAS,GAA3C,eAAOuI,EAAP,KACA,GADA,MACsDvI,EAAAA,EAAAA,UAAwB,OAA9E,eAAOwI,EAAP,KAA4BC,EAA5B,KAGMC,GAAezO,EAAAA,EAAAA,QAA0B,MACzC0O,GAAU1O,EAAAA,EAAAA,QAAuB,MACvC4G,QAAQC,IAAI,oBAAqBwH,GAEjC,IAAMhO,GAAWE,EAAAA,EAAAA,KAGXoO,EAAa,WAClBP,GAAU,GACVjP,EAAmB,KACnB,EA2BD,OAlBAuH,EAAAA,EAAAA,YAAU,WACTrG,GAASuO,EAAAA,EAAAA,MACT,GAAE,KAGHlI,EAAAA,EAAAA,YAAU,WACT,IAAM+F,EAAW,OAAGvO,QAAH,IAAGA,OAAH,EAAGA,EAAc2Q,QAAO,SAAC3G,GACzC,QAAGA,EAAKxI,eACCwI,EAAKxI,aAAac,UAAsB,OAAboF,QAAa,IAAbA,OAAA,EAAAA,EAAerG,MAAO,KAG1D,IAAEuP,OAEHN,EAAuB/B,GAAe,MAEtC7F,QAAQC,IAAI,eAAgB4F,EAC5B,GAAE,QAACvO,QAAD,IAACA,OAAD,EAACA,EAAc4Q,SAEfR,IAAcpQ,GAAqB,SAACyK,EAAA,EAAD,IAClCG,GAGH,iBAAKnK,UAAWyC,GAAcpC,IAAK0P,EAAnC,UACExQ,GACA,SAAC,GAAD,CACCc,IAAKyP,EACLvQ,aAAcA,EACdiB,mBAAoB,SAAC+I,GACpB/I,EAAmB+I,GACnBkG,GAAU,GACVxH,QAAQC,IAAI,wBAAyBqB,EACrC,EAEDyG,WAAYA,KAEX,+HAEFD,EAAQ3M,UACR,SAACwK,GAAD,CACCC,QAASkC,EAAQ3M,QACjB/C,IAAKyP,EACLhC,YAAa8B,GAAuB,KAGtC,SAAC1F,GAAD,CACCC,SAAUA,EACVI,gBAAiBuF,EAAa1M,QAC9BgH,cAAeoF,EACflF,cAvDwB,SAACzG,GAC3B,OAAG6L,QAAH,IAAGA,GAAAA,EAAiB5O,KACnBkP,IACAtO,GAAS0O,EAAAA,EAAAA,IAAYV,EAAgB5O,GAAI+C,IAE1C,EAmDEwG,UAAS,OAAEqF,QAAF,IAAEA,OAAF,EAAEA,EAAiB7L,YA9BV,SAAC,KAAD,CAAUe,GAAG,SAASyL,SAAS,GAkCpD,C,wDC7GM,IAAM/N,EAAU,SAACgO,GACvB,OAAOA,EAAM,GAAN,WAAeA,GAAQA,CAC9B,C","sources":["Redux/chat/selectors.ts","webpack://my-app/./src/components/Chat/Messages/Message/Message.module.scss?2dab","components/Chat/Messages/Message/MessageOptions/DeleteMessageOption.tsx","components/Chat/Messages/Message/Message.tsx","webpack://my-app/./src/components/Chat/Messages/Messages.module.scss?4dda","webpack://my-app/./src/UI/ReadMessageUser/ReadMessageUser.module.scss?b85c","UI/ReadMessageUser/ReadMessageUser.tsx","webpack://my-app/./src/components/Chat/Messages/MessagesGroup/MessagesGroup.module.scss?c2a9","components/Chat/Messages/MessagesGroup/MessagesGroup.tsx","UI/DeleteConfirm/DeleteConfirm.tsx","webpack://my-app/./src/UI/UsersWhoReadDialog/UsersWhoReadDialog.module.scss?3e95","UI/UsersWhoReadDialog/UsersWhoReadDialog.tsx","components/Chat/Messages/Messages.tsx","webpack://my-app/./src/components/Chat/Chat.module.scss?3294","webpack://my-app/./src/components/Chat/NewMessageForm/NewMessageForm.module.scss?1e51","components/Chat/NewMessageForm/NewMessageForm.tsx","webpack://my-app/./src/UI/ScrollBottomBtn/ScrollBottomBtn.module.scss?af1d","UI/ScrollBottomBtn/ScrollBottomBtn.tsx","utils/helpers/scrollElementToBottom.tsx","components/Chat/Chat.tsx","utils/helpers/formatters.ts"],"sourcesContent":["import { RootStateType } from './../store';\r\n\r\nexport const selectMessages = (state: RootStateType) => {\r\n\treturn state.messages.messagesData;\r\n}\r\n\r\nexport const selectIsMessagesFetching = (state: RootStateType) => {\r\n\treturn state.messages.isFetching;\r\n}\r\n\r\nexport const selectCurrMessageWhoReadList = (state: RootStateType) => {\r\n\treturn state.messages.currMessageWhoReadList;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Message_container__98ggQ\",\"contextMenu\":\"Message_contextMenu__5nXSb\",\"menuItem\":\"Message_menuItem__H05HU\",\"deleteMessage\":\"Message_deleteMessage__EwuNn\",\"Message\":\"Message_Message__F164D\",\"avatar\":\"Message_avatar__Caopz\",\"messageBody\":\"Message_messageBody__OUWWq\",\"username\":\"Message_username__fxinM\",\"text\":\"Message_text__WoS5w\",\"info\":\"Message_info__RJA5K\",\"createDate\":\"Message_createDate__xMQe3\",\"receivedStatus\":\"Message_receivedStatus__bfpZ1\",\"icon\":\"Message_icon__heZ9C\",\"edited\":\"Message_edited__g3pCJ\",\"_my\":\"Message__my__ylldE\"};","import React from 'react';\r\nimport { Typography } from 'antd';\r\n\r\nconst { Text } = Typography;\r\n\r\ntype PropsType = {\r\n\tshowDeleteConfirm: (messageId: string) => void,\r\n\tclassName: string,\r\n\tmessageId: string,\r\n}\r\n\r\nexport const DeleteMessageOption: React.FC<PropsType> = ({showDeleteConfirm, className, messageId}) => {\r\n\treturn (\r\n\t\t<Text \r\n\t\t\tonClick={() => showDeleteConfirm(messageId)}\r\n\t\t\ttype='danger' className={className}\r\n\t\t>Видалити</Text>\r\n\t)\r\n};","import { Avatar, Dropdown, Typography } from 'antd';\r\nimport { CheckCircleOutlined, UserOutlined } from '@ant-design/icons';\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { MessageDataType, UsersWhoReadMessageType } from '../../../../utils/types';\r\nimport classes from './Message.module.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport { addZero } from '../../../../utils/helpers/formatters';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport { useAppDispatch } from '../../../../Redux/store';\r\nimport { markMessageAsRead } from '../../../../Redux/chat/reducer';\r\nimport { DeleteMessageOption } from './MessageOptions/DeleteMessageOption';\r\nimport { EditMessageDataType } from '../../Chat';\r\nimport ListSubheader from '@mui/material/ListSubheader';\r\nimport PopupState, { bindTrigger, bindMenu, Props, bindPopover } from 'material-ui-popup-state';\r\nimport { Popover } from '@mui/material';\r\nimport Menu from '@mui/material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport cn from 'classnames';\r\nimport DoneAllOutlinedIcon from '@mui/icons-material/DoneAllOutlined';\r\nimport DoneOutlinedIcon from '@mui/icons-material/DoneOutlined';\r\n\r\ntype PropsType = {\r\n\tmessageData: MessageDataType,\r\n\tmyAccountId: string,\r\n\tisShort: boolean,\r\n\tshowDeleteConfirm: (messageId: string) => void,\r\n\tsetEditMessageData: (data: EditMessageDataType) => void,\r\n\topenInfoModal: (usersWHoRead: UsersWhoReadMessageType) => void,\r\n};\r\n\r\nconst Message = React.forwardRef<HTMLDivElement, PropsType>(({\r\n\tmessageData, myAccountId, showDeleteConfirm, setEditMessageData, openInfoModal, isShort\r\n}, ref) => {\r\n\tconst { text, photoUrl, uid, id, usersWhoRead, createdAt, displayName, received, edited} = messageData;\r\n\r\n\tconst menuRef = useRef<HTMLDivElement>(null);\r\n\t\r\n\t//intersection observer hook\r\n\tconst { ref: observerRef, inView, entry } = useInView({\r\n\t\tthreshold: 0.7,\r\n\t});\r\n\r\n\tconst dispatch = useAppDispatch();\r\n\r\n\t//if in view and weren't in view\r\n\tif(inView && !usersWhoRead.includes(myAccountId)) {\r\n\t\tdispatch(markMessageAsRead(id, myAccountId));\r\n\t}\r\n\r\n\t//check if my\r\n\tconst isMy = uid === myAccountId;\r\n\r\n\t//@ts-ignore\r\n\tconst createdAtMilisecs = createdAt?.seconds * 1000;\r\n\tconst sendDate = new Date(createdAtMilisecs || new Date().getTime());\r\n\t//getTime() - щоб не показувалися неправильні дані при надісланні повіомлення\r\n\tconst sendTime = `${addZero(sendDate.getHours())}:${addZero(sendDate.getMinutes())}`;\r\n\r\n\t// //show this by (right button of mouse) click on message\r\n\t// const contextMenu = (\r\n\t// \t<Menu className={classes.contextMenu}\r\n\t// \t\titems={[\r\n\t// \t\t\t{\r\n\t// \t\t\t\tlabel: <Text onClick={() => {\r\n\t// \t\t\t\t\tsetEditMessageData({value: text, id})\r\n\t// \t\t\t\t\tconsole.log('set edit message data message.tsx')\r\n\t// \t\t\t\t}}>Змінити</Text>,\r\n\t// \t\t\t\tkey: '1',\r\n\t// \t\t\t},\r\n\t// \t\t\t{\r\n\t// \t\t\t\tlabel: <Text onClick={() => openInfoModal(usersWhoRead)}>Інформація</Text>,\r\n\t// \t\t\t\tkey: '3',\r\n\t// \t\t\t},\r\n\t// \t\t\t{\r\n\t// \t\t\t\tlabel: \r\n\t// \t\t\t\t\t<DeleteMessageOption \r\n\t// \t\t\t\t\t\tclassName={classes.deleteMessage} \r\n\t// \t\t\t\t\t\tshowDeleteConfirm={showDeleteConfirm} messageId={messageData.id}\r\n\t// \t\t\t\t\t/>,\r\n\t// \t\t\t\tkey: '2',\r\n\t// \t\t\t},\r\n\t// \t\t]}\r\n\t// \t/>\r\n\t//  );\r\n\r\n\treturn (\r\n\t\t<div className={`${classes.Message} ${isMy && classes._my}`} ref={observerRef}>\r\n\t\t\t{/* {!isShort && !isMy && <Link to={`/account/${!isMy ? uid : ''}`} replace={true}>\r\n\t\t\t\t<ListSubheader>\t\r\n\t\t\t\t\t<Avatar \r\n\t\t\t\t\t\tsrc={photoUrl} size={40} icon={<UserOutlined />}\r\n\t\t\t\t\t\tclassName={classes.avatar}\r\n\t\t\t\t\t/>\r\n\t\t\t</Link>} */}\r\n\t\t\t<PopupState variant=\"popover\" popupId=\"message-context\">\r\n\t\t\t\t{ (popupState) => (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t<div {...bindTrigger(popupState)} className={classes.messageBody} ref={ref}>\r\n\t\t\t\t\t\t{!isShort && !isMy && <h5 className={classes.username}>{displayName}</h5>}\r\n\t\t\t\t\t\t<p className={classes.text}>{text}</p>\r\n\t\t\t\t\t\t<div className={classes.info}>\r\n\t\t\t\t\t\t\t{edited && <p className={classes.edited}>Змінено</p>}\r\n\r\n\t\t\t\t\t\t\t<p className={classes.createDate}>{sendTime}</p>\r\n\r\n\t\t\t\t\t\t\t{isMy && <p className={classes.receivedStatus}>\r\n\t\t\t\t\t\t\t\t{received \r\n\t\t\t\t\t\t\t\t? <DoneAllOutlinedIcon className={classes.icon} /> \r\n\t\t\t\t\t\t\t\t: <DoneOutlinedIcon className={classes.icon} />}\r\n\t\t\t\t\t\t\t</p>}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<Popover\r\n\t\t\t\t\t\t{...bindPopover(popupState)}\r\n\r\n\t\t\t\t\t\tonClick={(e: React.MouseEvent) =>{\r\n\t\t\t\t\t\t\tconst target = e.target as Element;\r\n\t\t\t\t\t\t\tconst isClickedOnMenu = target === menuRef.current;\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(!isClickedOnMenu) {\r\n\t\t\t\t\t\t\t\tpopupState.close();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tanchorOrigin={{\r\n\t\t\t\t\t\t\tvertical: 'bottom',\r\n\t\t\t\t\t\t\thorizontal: 'center',\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\ttransformOrigin={{\r\n\t\t\t\t\t\t\tvertical: 'top',\r\n\t\t\t\t\t\t\thorizontal: 'center',\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Menu {...bindMenu(popupState)} ref={menuRef} className={classes.contextMenu}>\r\n\t\t\t\t\t\t\t{isMy && \r\n\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t<MenuItem onClick={() => {\r\n\t\t\t\t\t\t\t\t\t\tsetEditMessageData({value: text, id})\r\n\t\t\t\t\t\t\t\t\t}} className={classes.menuItem}>Редагувати</MenuItem>\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t<MenuItem onClick={() => {\r\n\t\t\t\t\t\t\t\topenInfoModal(usersWhoRead)\r\n\t\t\t\t\t\t\t}} className={classes.menuItem}>Інформація</MenuItem>\r\n\r\n\t\t\t\t\t\t\t{isMy && \r\n\t\t\t\t\t\t\t\t<MenuItem className={classes.deleteBtn}>\r\n\t\t\t\t\t\t\t\t\t<DeleteMessageOption \r\n\t\t\t\t\t\t\t\t\t\tclassName={cn(classes.deleteMessage, classes.menuItem)} \r\n\t\t\t\t\t\t\t\t\t\tshowDeleteConfirm={showDeleteConfirm} \r\n\t\t\t\t\t\t\t\t\t\tmessageId={messageData.id}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</MenuItem>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</Menu>\r\n\t\t\t\t\t</Popover>\r\n\t\t\t\t\t</>\r\n\t\t\t\t)}\r\n\t\t\t</PopupState>\r\n\t\t</div>\r\n\t)\r\n});\r\n\r\nexport default Message","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Messages_container__dr4Lv\",\"Messages\":\"Messages_Messages__9VokZ\",\"messagesDate\":\"Messages_messagesDate__8PYdw\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ReadMessageUser_container__tq+2i\",\"ReadMessageUser\":\"ReadMessageUser_ReadMessageUser__Xtepz\",\"name\":\"ReadMessageUser_name__tWFva\"};","import React from 'react'\r\nimport { ReceivedAccountDataType } from '../../utils/types';\r\nimport classes from './ReadMessageUser.module.scss';\r\nimport Avatar from 'antd/lib/avatar/avatar';\r\nimport { UserOutlined } from '@ant-design/icons';\r\n\r\ntype PropsType = {\r\n\tuserData: ReceivedAccountDataType,\r\n};\r\n\r\nexport const ReadMessageUser: React.FC<PropsType> = ({userData}) => {\r\n\tconst { name, surname, avatarUrl } = userData;\r\n\r\n\treturn (\r\n\t\t<div className={classes.ReadMessageUser}>\r\n\t\t\t<Avatar className={classes.avatar} src={avatarUrl} icon={<UserOutlined />} size={50}/>\r\n\t\t\t<p className={classes.name}>{name} {surname}</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"MessagesGroup_container__MrPXw\",\"MessagesGroup\":\"MessagesGroup_MessagesGroup__ivC4C\",\"avatar\":\"MessagesGroup_avatar__9Zunw\",\"messages\":\"MessagesGroup_messages__yt51U\"};","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport classes from './MessagesGroup.module.scss';\r\nimport PersonIcon from '@mui/icons-material/Person';\r\nimport { Avatar } from '@mui/joy';\r\nimport { MessagesGroupMetadataType } from '../Messages';\r\n\r\ntype PropsType = {\r\n\tmetadata: MessagesGroupMetadataType,\r\n\tlistRef: React.RefObject<HTMLDivElement>,\r\n\tchildren: JSX.Element[],\r\n}\r\n\r\n\r\nexport const MessagesGroup: React.FC<PropsType> = ({metadata, children, listRef}) => {\r\n\treturn (\r\n\t\t<div className={classes.MessagesGroup}>\r\n\t\t\t{!metadata.isMy &&\r\n\t\t\t\t<div className={classes.avatar}>\r\n\t\t\t\t\t<Link to={`/account/${metadata.avatarData?.uid || ''}`}>\r\n\t\t\t\t\t\t<Avatar \r\n\t\t\t\t\t\t\tsrc={metadata.avatarData?.photoUrl || undefined}\r\n\t\t\t\t\t\t\tclassName={classes.avatar}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t<div className={classes.messages}>\r\n\t\t\t\t{children}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n","import { Button } from '@mui/joy';\r\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@mui/material';\r\nimport React from 'react';\r\nimport classes from './DeleteConfirm.module.scss';\r\n\r\ntype PropsType = {\r\n\ttarget: string,\r\n\tisShow: boolean,\r\n\tonCancel: () => void,\r\n\tonDelete: () => void,\r\n\tonClose: () => void, \r\n};\r\n\r\n\r\nexport const DeleteConfirm: React.FC<PropsType> = ({target, isShow, onCancel, onDelete, onClose}) => {\r\n  const handleDelete = () => {\r\n    onDelete();\r\n    onClose();\r\n  }\r\n  const handleCancel = () => {\r\n    onClose();\r\n  }\r\n\r\n\treturn (\r\n\t\t<Dialog\r\n        open={isShow}\r\n        onClose={onClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">\r\n          {`Ви дійсно хочете видалити ${target}?`}\r\n        </DialogTitle>\r\n        <DialogActions>\r\n          <Button variant='outlined' onClick={handleCancel}>Скасувати</Button>\r\n          <Button variant='outlined' color='danger' onClick={handleDelete} autoFocus>\r\n            Видалити\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\t)\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"UsersWhoReadDialog_container__LZgNt\",\"Dialog\":\"UsersWhoReadDialog_Dialog__1UcLq\",\"dialogTitle\":\"UsersWhoReadDialog_dialogTitle__-O4ke\",\"content\":\"UsersWhoReadDialog_content__lR5ig\",\"closeBtn\":\"UsersWhoReadDialog_closeBtn__03VaO\"};","import React from 'react';\r\nimport classes from './UsersWhoReadDialog.module.scss';\r\nimport { styled } from '@mui/material/styles';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n  '& .MuiDialogContent-root': {\r\n    padding: theme.spacing(2),\r\n  },\r\n  '& .MuiDialogActions-root': {\r\n    padding: theme.spacing(1),\r\n  },\r\n}));\r\n\r\ninterface DialogTitleProps {\r\n  id: string;\r\n  children?: React.ReactNode;\r\n  onClose: () => void;\r\n}\r\n\r\ntype PropsType = {\r\n\tchildren: React.ReactNode,\r\n\tonClose: () => void,\r\n\tisOpen: boolean,\r\n};\r\n\r\n\r\nconst BootstrapDialogTitle: React.FC<DialogTitleProps> = ({children, onClose, ...other}) => {\r\n  return (\r\n    <DialogTitle sx={{ m: 0, p: 2 }} {...other} className={classes.dialogTitle}>\r\n      {children}\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          onClick={onClose}\r\n\t\t\t className={classes.closeBtn}\r\n          sx={{\r\n            position: 'absolute',\r\n            right: 8,\r\n            top: 8,\r\n          }}\r\n        >\r\n          <CloseIcon className={classes.icon} />\r\n        </IconButton>\r\n      ) : null}\r\n    </DialogTitle>\r\n  );\r\n}\r\n\r\nexport const CustomizedDialogs: React.FC<PropsType> = ({children, onClose, isOpen}) => {\r\n  return (\r\n      <BootstrapDialog\r\n        onClose={onClose}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={isOpen}\r\n\t\t  className={classes.Dialog}\r\n      >\r\n        <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={onClose}>\r\n          Переглянули\r\n        </BootstrapDialogTitle>\r\n        <DialogContent dividers className={classes.content}>\r\n         \t{children}\r\n        </DialogContent>\r\n      </BootstrapDialog>\r\n  );\r\n}\r\n","import { FieldValue } from 'firebase/firestore';\r\nimport React, { useEffect, useImperativeHandle, useRef, useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { renderToStaticMarkup } from \"react-dom/server\"\r\nimport { selectMyAccountData, selectMyLoginData } from '../../../Redux/account/account-selectors';\r\nimport { selectCurrMessageWhoReadList, selectIsMessagesFetching, selectMessages } from '../../../Redux/chat/selectors'; \r\nimport Preloader from '../../../UI/Preloader';\r\nimport { ScrollBottomBtn } from '../../../UI/ScrollBottomBtn';\r\nimport { MessageDataType, MessagesDataType, ReceivedAccountDataType, UsersWhoReadMessageType } from '../../../utils/types';\r\nimport Message from './Message';\r\nimport classes from './Messages.module.scss';\r\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\r\nimport confirm from 'antd/lib/modal/confirm';\r\nimport { useAppDispatch } from '../../../Redux/store';\r\nimport { deleteMessage, setCurrMessageWhoReadList } from '../../../Redux/chat/reducer';\r\nimport { EditMessageDataType } from '../Chat';\r\nimport { Avatar, message, Modal } from 'antd';\r\nimport { ReadMessageUser } from '../../../UI/ReadMessageUser';\r\nimport ListSubheader from '@mui/material/ListSubheader';\r\nimport { Link } from 'react-router-dom';\r\nimport { MessagesGroup } from './MessagesGroup';\r\nimport { DeleteConfirm } from '../../../UI/DeleteConfirm';\r\nimport { UsersWhoReadDialog } from '../../../UI/UsersWhoReadDialog';\r\nimport { debounce } from 'lodash';\r\nimport { getStringDate } from '../../../utils/helpers/getStringDate';\r\n\r\ntype PropsType = {\r\n\tsetEditMessageData: (data: EditMessageDataType) => void, \r\n\tmessagesData: MessageDataType[],\r\n\tcancelEdit: () => void,\r\n\t//ref: React.RefObject<HTMLButtonElement>,\r\n}\r\n\r\ntype FormattedMessagesType = {[key: string]: MessageDataType[]};\r\nexport type MessagesGroupMetadataType = {\r\n\tisMy: boolean,\r\n\tavatarData?: {\r\n\t\tphotoUrl: string | null | undefined,\r\n\t\tuid: string,\r\n\t}\r\n}\r\n\r\ntype MessagesGroupType = {\r\n\tmessages: JSX.Element[],\r\n\tmetadata: MessagesGroupMetadataType,\r\n}\r\n\r\nconst getSortedByDateMessages = (messagesData: MessagesDataType): FormattedMessagesType => {\r\n\tconst sortedMessages: FormattedMessagesType = {};\r\n\r\n\tmessagesData.forEach((messageData: MessageDataType) => {\r\n\t\t//@ts-ignore\r\n\t\tconst createMilisecs = messageData.createdAt?.seconds * 1000;\r\n\t\tconst createDateString = getStringDate(createMilisecs || new Date().getTime());\r\n\r\n\t\tif(!sortedMessages[createDateString]) {\r\n\t\t\tsortedMessages[createDateString] = [];\r\n\t\t}\r\n\r\n\t\tsortedMessages[createDateString].push(messageData);\r\n\t});\r\n\r\n\r\n\treturn sortedMessages;\r\n}\r\n\r\nconst Messages = React.forwardRef<HTMLButtonElement, PropsType>(({setEditMessageData, messagesData}, ref) => {\r\n\tconst isFetching = useSelector(selectIsMessagesFetching);\r\n\tconst myAccountData = useSelector(selectMyAccountData);\r\n\tconst usersWhoReadCurrMessageData = useSelector(selectCurrMessageWhoReadList);\r\n\r\n\tconst [usersWhoReadCurrMessage, setUsersWhoReadCurrMessage] = useState<UsersWhoReadMessageType | null>(null);\r\n\tconst [isUsersFetching, setIsUsersFetching] = useState<boolean>(false);\r\n\tconst [messagesList, setMessagesList] = useState<JSX.Element[] | null>(null);\r\n\tconst [prevMessagesData, setPrevMessagesData] = useState<MessagesDataType>(messagesData);\r\n\tconst [myMessages, setMyMessages] = useState<JSX.Element[]>([]);\r\n\tconst [currDeleteMessageId, setCurrDeleteMessageId] = useState<string | null>(null);\r\n\r\n\tconst listRef = useRef<HTMLDivElement>(null);\r\n\tconst myMessageRef = useRef<HTMLDivElement>(null);\r\n\r\n\tconst dispatch = useAppDispatch();\r\n\r\n\t//show delete message modal\r\n\tconst showDeleteConfirm = (messageId: string) => {\r\n\t\tsetCurrDeleteMessageId(messageId)\r\n\t};\r\n\tconst cancelDelete = () => {\r\n\t\tsetCurrDeleteMessageId(null);\r\n\t}\r\n\tconst deleteMess = () => {\r\n\t\tif(currDeleteMessageId) {\r\n\t\t\tdispatch(deleteMessage(currDeleteMessageId));\r\n\t\t}\r\n\t}\r\n\r\n\t//on scroll listener\r\n\tuseEffect(() => {\r\n\t\tconst handleScroll = () => {\r\n\t\t\tconsole.log('onscroll');     \r\n\t\t}\r\n\t\tlistRef.current?.addEventListener('scroll', debounce(handleScroll, 100));\r\n\r\n\t\treturn () => {\r\n\t\t\tlistRef.current?.removeEventListener('scroll', handleScroll);\r\n\t\t}\r\n\t}, [listRef.current]);\r\n\r\n\t//scroll to last read message\r\n\tuseEffect(() => {\r\n\t\tif(myMessageRef.current) {\r\n\t\t\tmyMessageRef.current.scrollIntoView({\r\n\t\t\t\tbehavior: 'auto',\r\n\t\t\t})\r\n\t\t}\r\n\t}, [myMessageRef.current]);\r\n\r\n\t//sorted messages data -> messagesList(JSX.Element[])\r\n\tuseEffect(() => {\r\n\t\t//set messages list\r\n\t\tlet messages: JSX.Element[] = []; // messages list\r\n\r\n\t\t\t\r\n\t\t//sorting messages on groups by create date\r\n\t\tconst sortedMessages: FormattedMessagesType = getSortedByDateMessages(messagesData);\r\n\r\n\t\tObject.keys(sortedMessages).forEach(dateStr => {\r\n\t\t\tlet currMessages: JSX.Element[] = []; // curr date messages\r\n\t\t\tlet currGroupIndex = -1; // index of current filling group\r\n\t\t\tlet messagesGroups: MessagesGroupType[] = []; // groups of messages by 1 user in a row\r\n\r\n\t\t\tlet currMyMessages: JSX.Element[] = [];\r\n\r\n\t\t\t//set messages groups of 1 day\r\n\t\t\tsortedMessages[dateStr].map((data, i) => {\r\n\t\t\t\tconst prevUid = i > 0 ? sortedMessages[dateStr][i-1].uid : null;\r\n\t\t\t\tconst isShort: boolean = prevUid == data.uid;\r\n\t\t\t\tconst isMy = data.uid === myAccountData?.uid || null;\r\n\r\n\t\t\t\tconst currMessage = (\r\n\t\t\t\t\t<Message \r\n\t\t\t\t\t\tmessageData={data} \r\n\t\t\t\t\t\tmyAccountId={myAccountData?.uid || ''} \r\n\t\t\t\t\t\tsetEditMessageData={setEditMessageData}\r\n\t\t\t\t\t\tkey={`${data.createdAt}${data.uid}`} \r\n\t\t\t\t\t\tshowDeleteConfirm={showDeleteConfirm} \r\n\t\t\t\t\t\topenInfoModal={setUsersWhoReadCurrMessage}  \r\n\t\t\t\t\t\tisShort={isShort} \r\n\t\t\t\t\t\tref={myMessageRef}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\r\n\r\n\t\t\t\tif(isMy) {\r\n\t\t\t\t\tcurrMyMessages = [...currMyMessages, currMessage];\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//create new group\r\n\t\t\t\tif(!isShort) {\r\n\t\t\t\t\t//if not my, add user avatar, that wrote these messages(data)\r\n\t\t\t\t\tif(!isMy) {\r\n\t\t\t\t\t\tmessagesGroups.push({\r\n\t\t\t\t\t\t\tmessages: [],\r\n\t\t\t\t\t\t\tmetadata: {\r\n\t\t\t\t\t\t\t\tisMy: false,\r\n\t\t\t\t\t\t\t\tavatarData: {\r\n\t\t\t\t\t\t\t\t\tphotoUrl: data.photoUrl,\r\n\t\t\t\t\t\t\t\t\tuid: data.uid,\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t//add current message to new group\r\n\t\t\t\t\t\tmessagesGroups[currGroupIndex+1].messages.push(currMessage)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmessagesGroups.push({\r\n\t\t\t\t\t\t\tmessages: [currMessage],\r\n\t\t\t\t\t\t\tmetadata: {isMy: true}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcurrGroupIndex++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmessagesGroups[currGroupIndex].messages.push(currMessage);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t//sorted data -> JSX.Element[]\r\n\t\t\tcurrMessages = messagesGroups.map(group => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<MessagesGroup metadata={group.metadata} listRef={listRef}>\r\n\t\t\t\t\t\t{group.messages}\r\n\t\t\t\t\t</MessagesGroup>\r\n\t\t\t\t)\t\r\n\t\t\t});\r\n\r\n\t\t\tconst addedElements = [\r\n\t\t\t\t<div className={classes.messagesDate}>{dateStr}</div>, \r\n\t\t\t\t...currMessages\r\n\t\t\t];\r\n\r\n\t\t\tsetMyMessages((prevMessages) => [...prevMessages, ...currMyMessages]);\r\n\r\n\t\t\tmessages = [...messages, ...addedElements];\r\n\t\t});\r\n\r\n\t\tsetMessagesList(messages);\r\n\t}, [myAccountData, messagesData]);\r\n\r\n\t//get users that read curr message data (uid[] -> userData[])\r\n\tuseEffect(() => { \r\n\t\tconst getUsers = async () => {\r\n\t\t\tif(usersWhoReadCurrMessage) {\r\n\t\t\t\tsetIsUsersFetching(true);\r\n\t\t\t\tawait dispatch(setCurrMessageWhoReadList(usersWhoReadCurrMessage));\r\n\t\t\t\tsetIsUsersFetching(false);\r\n\t\t\t}\r\n\t\t}\r\n\t\tgetUsers();\r\n\t}, [usersWhoReadCurrMessage]);\r\n\r\n\t//users who read current message components\r\n\tlet whoReadList: JSX.Element[] = [];\r\n\r\n\tif(usersWhoReadCurrMessageData) {\r\n\t\t//set who read list(JSX.Element)\r\n\t\tusersWhoReadCurrMessageData.forEach(data => {\r\n\t\t\twhoReadList.push(<ReadMessageUser userData={data} />);\r\n\t\t});\r\n\t}\r\n\r\n\tconst closeModal = () => {\r\n\t\tsetUsersWhoReadCurrMessage(null);\r\n\t}\r\n\r\n\t//add new message to state\r\n\t/* useEffect(() => {\r\n\t\tif(messagesList && messagesList.length > 0 && prevMessagesData.length !== messagesData.length) {\r\n\t\t\tconst diff = messagesData.filter(({ id: id1 }, i) => {\r\n\t\t\t\tconst isDifferent = prevMessagesData[i]?.id !== id1;\r\n\r\n\t\t\t\tconsole.log('is different', isDifferent);\r\n\r\n\t\t\t\treturn isDifferent;\r\n\t\t\t});\r\n\r\n\t\t\t//to chnage this if we create new group\r\n\t\t\tconst lastGroup = messagesList.pop();\r\n\r\n\t\t\t//to add new message to this\r\n\t\t\tconst groupMessages = lastGroup?.props.children;\r\n\r\n\t\t\tif(diff.length > 0) {\r\n\t\t\t\tconst newGroups = diff.map((data, i) => {\r\n\t\t\t\t\tconst lastMessage: MessageDataType = i === 0 ? prevMessagesData[prevMessagesData.length - 1] : diff[i - 1];\r\n\t\t\t\t\t//we need to create new group\r\n\t\t\t\t\tconst lastAccountId = lastMessage.uid ;\r\n\t\t\t\t\t\r\n\t\t\t\t\t//get messages dates\r\n\t\t\t\t\t//@ts-ignore\r\n\t\t\t\t\tconst lastDate = lastMessage.createdAt?.seconds ? new Date(lastMessage.createdAt.seconds * 1000) : null;\r\n\r\n\t\t\t\t\tconsole.log('last date', lastDate);\r\n\r\n\t\t\t\t\t//@ts-ignore\r\n\t\t\t\t\tconst currDate = data.createdAt?.seconds ? new Date(data.createdAt.seconds * 1000) : new Date();\r\n\t\r\n\t\t\t\t\t//comparing dates\r\n\t\t\t\t\tconst isNewDate = lastDate ? lastDate.toLocaleDateString() !== currDate.toLocaleDateString() : false;\r\n\r\n\t\t\t\t\t//create new group or not\r\n\t\t\t\t\tconst isNewGroup: boolean = lastAccountId !== data.uid;\r\n\t\t\t\t\tconst isMy = data.uid === myAccountData?.uid;\r\n\t\r\n\t\t\t\t\tconst currMessage = (\r\n\t\t\t\t\t\t<Message \r\n\t\t\t\t\t\t\tmessageData={data} \r\n\t\t\t\t\t\t\tmyAccountId={myAccountData?.uid || ''} \r\n\t\t\t\t\t\t\tsetEditMessageData={setEditMessageData}\r\n\t\t\t\t\t\t\tkey={`${data.createdAt}${data.uid}`} \r\n\t\t\t\t\t\t\tshowDeleteConfirm={showDeleteConfirm} \r\n\t\t\t\t\t\t\topenInfoModal={setUsersWhoReadCurrMessage}  \r\n\t\t\t\t\t\t\tisShort={isNewGroup} \r\n\t\t\t\t\t\t\tref={isMy ? myMessageRef : undefined}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\r\n\t\t\t\t\tif(!isNewGroup && !isNewDate) {\r\n\t\t\t\t\t\tgroupMessages.push(currMessage);\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tconst metadata: MessagesGroupMetadataType = {\r\n\t\t\t\t\t\tisMy: isNewGroup,\r\n\t\t\t\t\t\tavatarData: {\r\n\t\t\t\t\t\t\tphotoUrl: data.photoUrl,\r\n\t\t\t\t\t\t\tuid: data.uid,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t{isNewGroup && !isNewDate ?\r\n\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t{lastGroup}\r\n\t\t\t\t\t\t\t\t\t<MessagesGroup listRef={listRef} metadata={metadata}>\r\n\t\t\t\t\t\t\t\t\t\t<></>\r\n\t\t\t\t\t\t\t\t\t\t{currMessage}\r\n\t\t\t\t\t\t\t\t\t</MessagesGroup>\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t: isNewDate ?\r\n\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t{lastGroup}\r\n\t\t\t\t\t\t\t\t\t<div className={classes.messagesDate}>{currDate.toLocaleDateString()}</div>, \r\n\t\t\t\t\t\t\t\t\t<MessagesGroup listRef={listRef} metadata={metadata}>\r\n\t\t\t\t\t\t\t\t\t\t<></>\r\n\t\t\t\t\t\t\t\t\t\t{currMessage}\r\n\t\t\t\t\t\t\t\t\t</MessagesGroup>\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t<MessagesGroup listRef={listRef} metadata={metadata}>\r\n\t\t\t\t\t\t\t\t\t{groupMessages}\r\n\t\t\t\t\t\t\t\t</MessagesGroup>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t)\r\n\t\t\t\t})\r\n\t\r\n\t\r\n\t\t\t\tconst updatedList = [...messagesList, ...newGroups];\r\n\t\r\n\t\t\t\t//set JSX.Elements -> rerender\r\n\t\t\t\tsetMessagesList((updatedList));\r\n\t\t\t\t//for next new messages compare\r\n\t\t\t\tsetPrevMessagesData(messagesData);\r\n\t\t\t}\r\n\t\t}\r\n\t}, [messagesData]);\r\n\r\n\t//change messages\r\n\tuseEffect(() => {\r\n\t\tif(messagesData !== prevMessagesData) {\r\n\t\t\tconst changedEl: JSX.Element[] = [];\r\n\r\n\t\t\tconst diff = messagesData.filter(({ text: text1 }, i) => {\r\n\t\t\t\tconst isDifferent = prevMessagesData[i]?.text !== text1;\r\n\r\n\t\t\t\tconsole.log('is different', isDifferent);\r\n\r\n\t\t\t\treturn isDifferent;\r\n\t\t\t});\r\n\r\n\t\t\tif(diff.length > 0) {\r\n\r\n\t\t\t\tdiff.forEach(data => {\r\n\t\t\t\t\t\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}, [messagesData]);\r\n\t*/\r\n\tif(!myAccountData) return <Preloader />;\r\n\r\n\treturn (\r\n\t\t<div className={classes.Messages} ref={listRef}>\r\n\t\t\t{isFetching && <Preloader />}\r\n\r\n\t\t\t<UsersWhoReadDialog\r\n\t\t\t\tisOpen={!!usersWhoReadCurrMessage}\r\n\t\t\t\tonClose={closeModal}\r\n\t\t\t>\r\n\t\t\t\t{whoReadList || 'Ваше повідомлення ніхто не прочитав'}\r\n\t\t\t</UsersWhoReadDialog>\r\n\t\t\t\r\n\t\t\t<DeleteConfirm \r\n\t\t\t\ttarget='це повідомлення'\r\n\t\t\t\tisShow={!!currDeleteMessageId}\r\n\t\t\t\tonCancel={cancelDelete}\r\n\t\t\t\tonDelete={deleteMess}\r\n\t\t\t\tonClose={cancelDelete}\r\n\t\t\t/>\r\n\r\n\t\t\t{!!messagesList && messagesList['length'] > 0\r\n\t\t\t\t? \r\n\t\t\t\t\tmessagesList\r\n\t\t\t\t: <div>Немає повідомлень</div>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n});\r\n\r\nexport default Messages","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Chat_container__EuQus\",\"Chat\":\"Chat_Chat__qtwg3\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"NewMessageForm_container__uLUsq\",\"NewMessageForm\":\"NewMessageForm_NewMessageForm__yn-Kq\",\"textareaWrap\":\"NewMessageForm_textareaWrap__2SAy-\"};","import React, { FocusEvent, ReactElement, useEffect, useRef, useState } from 'react';\r\n\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport TextArea from 'antd/lib/input/TextArea';\r\nimport classes from './NewMessageForm.module.scss';\r\nimport Preloader from '../../../UI/Preloader';\r\nimport { MessageDataType, UserType } from '../../../utils/types';\r\nimport { serverTimestamp } from 'firebase/firestore';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { editMessage, sendMessage } from '../../../Redux/chat/reducer';\r\nimport { AnyAction } from 'redux';\r\nimport { selectMyAccountData } from '../../../Redux/account/account-selectors';\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport { v1 } from 'uuid';\r\nimport { useAppDispatch } from '../../../Redux/store';\r\nimport { scrollElementToBottom } from '../../../utils/helpers/scrollElementToBottom';\r\nimport { Button, FormControl, IconButton, Textarea } from '@mui/joy';\r\nimport { message } from 'antd';\r\nimport { footerHeightReceived } from '../../../Redux/app/appReducer';\r\n\r\ntype PropsType = {\r\n\tauthData: UserType | null,\r\n\tisMessageEdit: boolean,\r\n\tcurrValue?: string, \r\n\tscrollBottomBtn: HTMLButtonElement | null,\r\n\tupdateMessage: (value: string) => void,\r\n}\r\n\r\ntype FieldValues = {\r\n\tmessage: string,\r\n}\r\n\r\nexport const NewMessageForm: React.FC<PropsType> = React.memo(({\r\n\tauthData, isMessageEdit, currValue, updateMessage, scrollBottomBtn\r\n}): ReactElement<any, any> => {\r\n\t//react-hook-form\r\n\tconst { control, formState: {errors, isValid}, handleSubmit, reset, setValue, trigger, watch } = useForm<FieldValues>();\r\n\tconst [isSending, setIsSending] = useState<boolean>(false);\r\n\tconst [isFocused, setIsFocused] = useState<boolean>(false);\r\n\tconst [isFirstlyOpened, setIsFirstlyOpened] = useState<boolean>(true);\r\n\tconst [isSubmitted, setIsSubmitted] = useState<boolean>(false);\r\n\tconst [textareaEl, setTextareaEl] = useState<HTMLTextAreaElement | null>(null);\r\n\r\n\t//ant design form(щоб показувати зарашнє значення коментара) & reset formmessa\r\n\r\n\tconst accountData = useSelector(selectMyAccountData);\r\n\r\n\t//for autofocus\r\n\tconst messageField = useRef<HTMLDivElement>(null);\r\n\tconst formRef = useRef<HTMLFormElement>(null);\r\n\r\n\t//set textarea element\r\n\tuseEffect(() => {\r\n\t\tif(messageField.current) {\r\n\t\t\t//fignyaaaaaaaa \r\n\t\t\t// DELETE THISSSS! IS`S GIVNOCODE\r\n\t\t\t//ale pobachymo\r\n\t\t\tsetTextareaEl(messageField.current.querySelector('textarea'));\r\n\t\t\tconsole.log('set textareaEl');\r\n\t\t}\r\n\t}, []);\r\n\r\n\tconst dispatch = useAppDispatch();\r\n\r\n\tconst onSubmit = async (data: FieldValues) => {\r\n\t\tconsole.log('submit data', data);\r\n\t\tif(!isSubmitted) setIsSubmitted(true);\r\n\t \tif(!isMessageEdit) {\r\n\t\t\tsetIsSending(true);\r\n\t\t\tawait addMessage(data.message);\r\n\t\t\tsetIsSending(false);\r\n\t\t\tif(scrollBottomBtn) {\r\n\t\t\t\t//for in MEssages changed will apply\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tconsole.log('cliked!');\r\n\t\t\t\t\tscrollBottomBtn.click()\r\n\t\t\t\t}, 300);\r\n\t\t\t}\r\n\t\t} else  {\r\n\t\t\tsetIsSending(true);\r\n\t\t\tawait updateMessage(data.message);\r\n\t\t\tsetIsSending(false);\r\n\t\t}\r\n\r\n\t\t//reset\r\n\t\tif(textareaEl) textareaEl.value = '';\r\n\t\tsetValue('message', '', {shouldValidate: true});\r\n\t};\r\n\r\n\t//for edit\r\n\tuseEffect(() => {\r\n\t\t//set focus on the message field\r\n\t\tconsole.log('curr value or ismessageEdit changed', textareaEl, isMessageEdit);\r\n\t\tif(textareaEl && isMessageEdit) {\r\n\t\t\ttextareaEl.focus();\r\n\t\t}\r\n\t\t//set to react-hook-form value\r\n\t\t\r\n\t}, [isMessageEdit]);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetValue('message', currValue || '');\r\n\t}, [currValue])\r\n\r\n\t//send message to thunk\r\n\tconst addMessage = async (newMessage: string) => {\r\n\t\tconst newMessageData: MessageDataType = {\r\n\t\t\tuid: authData?.uid || 'undefined',\r\n\t\t\tdisplayName: `${accountData?.surname} ${accountData?.name}` || 'Анонім',\r\n\t\t\tphotoUrl: accountData?.avatarUrl || '',\r\n\t\t\ttext: newMessage,\r\n\t\t\tcreatedAt: serverTimestamp(),\r\n\t\t\tid: v1(),\r\n\t\t\tusersWhoRead: [authData?.uid || null],\r\n\t\t\tedited: false,\r\n\t\t\treceived: false,\r\n\t\t}\r\n\r\n\t\treset();\r\n\t\tawait dispatch(sendMessage(newMessageData));\r\n\t\tif(textareaEl) textareaEl.value = '';\r\n\t}\r\n\r\n\t//form instaead of footer\r\n\tuseEffect(() => {\r\n\t\tif(formRef.current) {\r\n\t\t\tconst formHeight = formRef.current.offsetHeight;\r\n\r\n\t\t\tconsole.log('formHeight', formHeight);\r\n\r\n\t\t\tdispatch(footerHeightReceived(formHeight));\r\n\t\t}\r\n\t}, []);\r\n\r\n\t//trigger message field for start validation\r\n\tuseEffect(() => {\r\n\t\tif(!isSubmitted) {\r\n\t\t\tconsole.log('trigger');\r\n\t\t\ttrigger('message');\r\n\t\t}\r\n\t}, [watch('message')]);\r\n\r\n\tconst isSendBtnShowing = isFirstlyOpened && !isMessageEdit ? !isFirstlyOpened : !isMessageEdit ? !errors.message : true;\r\n\r\n\treturn (\r\n\t\t<form className={classes.NewMessageForm} onSubmit={handleSubmit(onSubmit)} ref={formRef}>\r\n\t\t\t<Controller\r\n\t\t\t\tname='message'\r\n\t\t\t\tcontrol={control}\r\n\t\t\t\trules={{\r\n\t\t\t\t\trequired: 'Напишіть повідомлення!',\r\n\t\t\t\t\tminLength: {value: 1, message: 'Напишіть повідомлення!'},\r\n\t\t\t\t\tmaxLength: {value: 600, message: 'Повідомлення надто довге'},\r\n\t\t\t\t}}\r\n\t\t\t\tdefaultValue={currValue}\r\n\t\t\t\trender={({field: {onChange, value}}) => (\r\n\t\t\t\t\t<FormControl className={classes.textareaWrap} >\r\n\t\t\t\t\t\t<Textarea\r\n\t\t\t\t\t\t\tvalue={value}\r\n\t\t\t\t\t\t\t// error={!!errors.message && isFocused}\r\n\t\t\t\t\t\t\t//onFocus={() => setIsFirstlyOpened(false)}\r\n\t\t\t\t\t\t\t// onBlur={() => setIsFocused(false)}\r\n\t\t\t\t\t\t\tdefaultValue={currValue}\r\n\t\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t\t\tonChange(e);\r\n\t\t\t\t\t\t\t\tif(isFirstlyOpened) setIsFirstlyOpened(false);\r\n\t\t\t\t\t\t\t}} \r\n\t\t\t\t\t\t\tcomponent={FormControl}\r\n\t\t\t\t\t\t\tplaceholder='Ваше повідомлення'\r\n\t\t\t\t\t\t\tsize='lg'\r\n\t\t\t\t\t\t\tref={messageField}\r\n\t\t\t\t\t\t\tsx={{minWidth: '100%' }}\r\n\t\t\t\t\t\t\tendDecorator={ isSendBtnShowing &&\t\t\r\n\t\t\t\t\t\t\t\t<IconButton color='primary' type='submit' className={classes.sendBtn}> \r\n\t\t\t\t\t\t\t\t\t<SendIcon />\r\n\t\t\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</FormControl>\r\n\t\t\t\t)} \r\n\t\t\t/>\r\n\t\t</form>\r\n\t)\r\n});\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ScrollBottomBtn_container__1OHUl\",\"ScrollBottomBtn\":\"ScrollBottomBtn_ScrollBottomBtn__GScVs\",\"_hidden\":\"ScrollBottomBtn__hidden__+f-Ia\",\"arrow\":\"ScrollBottomBtn_arrow__h1LUK\",\"unreadCount\":\"ScrollBottomBtn_unreadCount__FhPX2\",\"icon\":\"ScrollBottomBtn_icon__60NNc\"};","import { ArrowDownOutlined } from '@ant-design/icons';\r\nimport { BoySharp } from '@mui/icons-material';\r\nimport { debounce } from 'lodash';\r\nimport React, { RefObject, useEffect, useState } from 'react';\r\nimport { scrollElementToBottom } from '../../utils/helpers/scrollElementToBottom';\r\nimport classes from './ScrollBottomBtn.module.scss';\r\n\r\ntype PropsType = {\r\n\telement: HTMLDivElement,\r\n\tunreadCount: number,\r\n}\r\n\r\nexport const ScrollBottomBtn = React.forwardRef<HTMLButtonElement, PropsType>(({element, unreadCount}, ref) => {\r\n\tconst body = document.body;\r\n\r\n\tconst scrollToBottomHeight = body.scrollHeight + body.clientHeight;\r\n\tconst remainingScroll = body.scrollHeight - (element.scrollTop + element.clientHeight);\r\n\tconst [isBottom, setIsBottom ] = useState<boolean>(remainingScroll < 100);\r\n\tconst [isShowing, setIsShowing] = useState<boolean>(false);\r\n\tconst [prevScroll, setPrevScroll] = useState<number>(scrollToBottomHeight);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst changeVisibility = debounce((e) => {\r\n\t\t\tlet currScroll = window.scrollY;\r\n\t\t\tconst isInBottom = body.scrollHeight - (currScroll + body.clientHeight) < 100;\r\n\t\t\tsetIsBottom(isInBottom);\r\n\t\t\tconsole.log('is in bottom', isInBottom, 'is showing:', isShowing);\r\n\r\n\t\t\tif(currScroll < prevScroll && !isInBottom) {\r\n\t\t\t\tsetIsShowing(true);\r\n\t\t\t} else if(currScroll > prevScroll)  {\r\n\t\t\t\tsetIsShowing(false);\r\n\t\t\t}\r\n\t\r\n\t\t\tsetPrevScroll(currScroll);\r\n\t\t}, 20);\r\n\r\n\t\t//visible / unvisible\r\n\t\twindow.addEventListener('scroll', changeVisibility);\r\n\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener('scroll', changeVisibility);\r\n\t\t}\r\n\t}, [element]);  \r\n\r\n\r\n\tconst scrollBottom = () => {\r\n\t\tscrollElementToBottom(element, scrollToBottomHeight);\r\n\t\twindow.scrollTo({\r\n\t\t\ttop: scrollToBottomHeight, \r\n\t\t})\r\n\t\tconsole.log('clicked');\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={`${classes.ScrollBottomBtn} ${isBottom && !isShowing ? classes._hidden : ''}`}>\r\n\t\t\t<button ref={ref} className={classes.arrow} onClick={scrollBottom}>\r\n\t\t\t\t{unreadCount > 0 && <div className={classes.unreadCount}>\r\n\t\t\t\t\t{unreadCount}\r\n\t\t\t\t</div>}\r\n\t\t\t\t<ArrowDownOutlined className={classes.icon} />\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t)\r\n});\r\n","export const scrollElementToBottom = (element: HTMLDivElement, value?: number) => {\r\n\tconsole.log('scrolll elmenet to bottom', value);\r\n\r\n\tlet scrollToBottomHeight = 0;\r\n\tif(!value) {\r\n\t\tscrollToBottomHeight = element.scrollHeight - element.clientHeight\r\n\t}\r\n\telement.scrollTo({\r\n\t\tbehavior: 'smooth',\r\n\t\ttop: value || scrollToBottomHeight,\r\n\t});\r\n}","import React, { useContext, useEffect, useRef, useState } from 'react'\r\nimport { useAuthState } from 'react-firebase-hooks/auth'\r\nimport { Navigate } from 'react-router-dom';\r\nimport { FirebaseContext } from '../..';\r\nimport Messages from './Messages';\r\nimport classes from './Chat.module.scss';\r\nimport { NewMessageForm } from './NewMessageForm';\r\nimport { Auth } from 'firebase/auth';\r\nimport { MessageDataType } from '../../utils/types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectMessages } from '../../Redux/chat/selectors';\r\nimport { editMessage, startMessaging, stopMessaging } from '../../Redux/chat/reducer';\r\nimport { AnyAction } from 'redux';\r\nimport Preloader from '../../UI/Preloader';\r\nimport { useAppDispatch } from '../../Redux/store';\r\nimport { ScrollBottomBtn } from '../../UI/ScrollBottomBtn';\r\nimport { selectMyAccountData } from '../../Redux/account/account-selectors';\r\n\r\nexport type EditMessageDataType = {\r\n\tvalue: string,\r\n\tid: string,\r\n}\r\n\r\nconst Chat = () => {\r\n\tconst { auth } = useContext(FirebaseContext);\r\n\tconst [authData] = useAuthState(auth as Auth);\r\n\r\n\tconst messagesData = useSelector(selectMessages);\r\n\tconst myAccountData = useSelector(selectMyAccountData);\r\n\r\n\t//is exists messages now editing\r\n\tconst [isEdit, setIsEdit] = useState<boolean>(false);\r\n\tconst [editMessageData, setEditMessageData] = useState<EditMessageDataType | null>(null);\r\n\tconst [isLoading, setIsLoading] = useState(true);\r\n\tconst [unreadMessagesCount, setUnreadMessagesCount] = useState<number | null>(null);\r\n\r\n\t//messages list ref\r\n\tconst scrollBtnRef = useRef<HTMLButtonElement>(null);\r\n\tconst chatRef = useRef<HTMLDivElement>(null);\r\n\tconsole.log('edit message data', editMessageData);\r\n\r\n\tconst dispatch = useAppDispatch();\r\n\r\n\t//update message\r\n\tconst cancelEdit = () => {\r\n\t\tsetIsEdit(false);\r\n\t\tsetEditMessageData(null);\r\n\t}\r\n\r\n\tconst sendUpdatedMessage = (value: string) => {\r\n\t\tif(editMessageData?.id) {\r\n\t\t\tcancelEdit();\r\n\t\t\tdispatch(editMessage(editMessageData.id, value));\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(startMessaging());\r\n\t}, []);\r\n\r\n\t//set unread messages count\r\n\tuseEffect(() => {\r\n\t\tconst unreadCount = messagesData?.filter((data: MessageDataType) => {\r\n\t\t\tif(data.usersWhoRead) {\r\n\t\t\t\treturn !data.usersWhoRead.includes(myAccountData?.uid || null)\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}).length;\r\n\r\n\t\tsetUnreadMessagesCount(unreadCount || null);\r\n\r\n\t\tconsole.log('unread count', unreadCount);\r\n\t}, [messagesData?.length])\r\n\r\n\tif(isLoading && !messagesData) return <Preloader />;\r\n\tif(!authData) return <Navigate to='/login' replace={true}/>\t\r\n\r\n\treturn (\r\n\t\t<div className={classes.Chat} ref={chatRef}>\r\n\t\t\t{messagesData ? \r\n\t\t\t\t<Messages \r\n\t\t\t\t\tref={scrollBtnRef} \r\n\t\t\t\t\tmessagesData={messagesData}\r\n\t\t\t\t\tsetEditMessageData={(data: EditMessageDataType) => {\r\n\t\t\t\t\t\tsetEditMessageData(data);\r\n\t\t\t\t\t\tsetIsEdit(true);\r\n\t\t\t\t\t\tconsole.log('set edit message data', data);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\tcancelEdit={cancelEdit}\r\n\t\t\t\t/>\r\n\t\t\t\t: <div>Немає повідомлень</div>\r\n\t\t\t}\r\n\t\t\t{chatRef.current && \r\n\t\t\t\t<ScrollBottomBtn \r\n\t\t\t\t\telement={chatRef.current} \r\n\t\t\t\t\tref={scrollBtnRef} \r\n\t\t\t\t\tunreadCount={unreadMessagesCount || 0} \r\n\t\t\t\t/>\r\n\t\t\t}\r\n\t\t\t<NewMessageForm \r\n\t\t\t\tauthData={authData} \r\n\t\t\t\tscrollBottomBtn={scrollBtnRef.current} \r\n\t\t\t\tisMessageEdit={isEdit} \r\n\t\t\t\tupdateMessage={sendUpdatedMessage} \r\n\t\t\t\tcurrValue={editMessageData?.value}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Chat","export const addZero = (num: number) => {\r\n\treturn num < 10 ? `0${num}` : num;\r\n}"],"names":["selectMessages","state","messages","messagesData","selectIsMessagesFetching","isFetching","selectCurrMessageWhoReadList","currMessageWhoReadList","Text","Typography","DeleteMessageOption","showDeleteConfirm","className","messageId","onClick","type","React","ref","messageData","myAccountId","setEditMessageData","openInfoModal","isShort","text","uid","photoUrl","id","usersWhoRead","createdAt","displayName","received","edited","menuRef","useRef","useInView","threshold","observerRef","inView","dispatch","entry","useAppDispatch","includes","markMessageAsRead","isMy","createdAtMilisecs","seconds","sendDate","Date","getTime","sendTime","addZero","getHours","getMinutes","classes","variant","popupId","popupState","bindTrigger","DoneAllOutlined","DoneOutlined","Popover","bindPopover","e","target","current","close","anchorOrigin","vertical","horizontal","transformOrigin","Menu","bindMenu","MenuItem","value","cn","ReadMessageUser","userData","name","surname","avatarUrl","src","icon","UserOutlined","size","MessagesGroup","metadata","children","listRef","to","avatarData","Avatar","undefined","DeleteConfirm","isShow","onDelete","onCancel","onClose","Dialog","open","DialogTitle","DialogActions","Button","color","autoFocus","BootstrapDialog","styled","theme","padding","spacing","BootstrapDialogTitle","other","sx","m","p","IconButton","position","right","top","Close","CustomizedDialogs","isOpen","DialogContent","dividers","Messages","useSelector","myAccountData","selectMyAccountData","usersWhoReadCurrMessageData","useState","usersWhoReadCurrMessage","setUsersWhoReadCurrMessage","setIsUsersFetching","messagesList","setMessagesList","setMyMessages","currDeleteMessageId","setCurrDeleteMessageId","myMessageRef","cancelDelete","useEffect","handleScroll","console","log","addEventListener","debounce","removeEventListener","scrollIntoView","behavior","sortedMessages","forEach","createMilisecs","createDateString","getStringDate","push","getSortedByDateMessages","Object","keys","dateStr","currMessages","currGroupIndex","messagesGroups","currMyMessages","map","data","i","currMessage","group","addedElements","prevMessages","getUsers","setCurrMessageWhoReadList","whoReadList","Preloader","deleteMessage","NewMessageForm","authData","isMessageEdit","currValue","updateMessage","scrollBottomBtn","useForm","control","formState","errors","handleSubmit","isValid","reset","setValue","trigger","watch","setIsSending","isFirstlyOpened","setIsFirstlyOpened","isSubmitted","setIsSubmitted","textareaEl","setTextareaEl","accountData","messageField","formRef","querySelector","onSubmit","addMessage","message","setTimeout","click","shouldValidate","focus","newMessage","newMessageData","serverTimestamp","v1","sendMessage","formHeight","offsetHeight","footerHeightReceived","isSendBtnShowing","rules","required","minLength","maxLength","defaultValue","render","field","onChange","FormControl","Textarea","component","placeholder","minWidth","endDecorator","Send","ScrollBottomBtn","element","unreadCount","body","document","scrollToBottomHeight","scrollHeight","clientHeight","remainingScroll","scrollTop","isBottom","setIsBottom","isShowing","setIsShowing","prevScroll","setPrevScroll","changeVisibility","currScroll","window","scrollY","isInBottom","scrollTo","scrollElementToBottom","ArrowDownOutlined","auth","useContext","FirebaseContext","useAuthState","isEdit","setIsEdit","editMessageData","isLoading","unreadMessagesCount","setUnreadMessagesCount","scrollBtnRef","chatRef","cancelEdit","startMessaging","filter","length","editMessage","replace","num"],"sourceRoot":""}