{"version":3,"file":"static/js/986.0c832ab4.chunk.js","mappings":"+MACA,EAAiE,yB,wFCAjE,GAAgB,UAAY,+BAA+B,YAAc,iCAAiC,cAAgB,mCAAmC,MAAQ,2BAA2B,OAAS,6B,kFCgB5LA,EAAmCC,EAAAA,MAAW,YAAoB,IAAlBC,EAAiB,EAAjBA,YAE3DC,EACGD,EADHC,KAAMC,EACHF,EADGE,QAASC,EACZH,EADYG,UAAkBC,EAC9BJ,EADuBK,MAAiBC,EACxCN,EADwCM,OAAQC,EAChDP,EADgDO,OAAQC,EACxDR,EADwDQ,QAASC,EACjET,EADiES,UAE/DC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAGxBC,EAAY,WAAMC,EAAAA,EAAAA,GAAQX,EAAUY,MAAxB,aAAiCD,EAAAA,EAAAA,GAAQX,EAAUa,QAAnD,aAA8DF,EAAAA,EAAAA,GAAQX,EAAUc,QAElG,OACC,iBAAKC,UAAWC,EAAAA,YAAhB,WACC,iBAAKD,UAAWC,EAAAA,cAAhB,WACC,gBAAKD,UAAWC,EAAAA,SAChB,SAAC,IAAD,CACCD,UAAWC,EAAAA,OAAgBC,MAAM,SAACC,EAAA,EAAD,IACjCC,IAAMb,IAAS,OAAIC,QAAJ,IAAIA,OAAJ,EAAIA,EAAWa,UAAWC,IAAI,oGAG/C,iBAAKN,UAAWC,EAAAA,YAAhB,WACC,gBAAID,UAAWC,EAAAA,SAAf,UAAkCjB,EAAlC,IAA6CD,MAC7C,cAAGiB,UAAWC,EAAAA,SAAd,SAAiCf,QAElC,iBAAKc,UAAWC,EAAAA,UAAhB,WACC,gBAAKD,UAAWC,EAAAA,KAAhB,UACC,gBAAKG,IAAKG,EAAcD,IAAI,gBAE7B,0BAAOX,QAER,cAAGK,UAAWC,EAAAA,OAAd,SAA+BZ,KAC/B,cAAGW,UAAWC,EAAAA,MAAd,SAA8BX,KAC9B,gBAAKU,UAAWC,EAAAA,aAAhB,UACC,UAACO,EAAA,EAAD,CAAMC,KAAMrB,EAAOsB,QAASC,MAAM,0DAAaC,OAAO,SAASZ,UAAWC,EAAAA,OAA1E,WACC,gBAAKD,UAAWC,EAAAA,KAAhB,UACC,gBAAKG,I,q3HAAiBE,IAAI,uCAE1BlB,EAAOyB,wBAKZ,I,mGCxDD,GAAgB,UAAY,+BAA+B,YAAc,iCAAiC,eAAiB,oCAAoC,aAAe,kCAAkC,QAAU,6BAA6B,WAAa,gCAAgC,aAAe,mC,6FCUtSC,EAAoC,SAAC,GAE3C,IADN/B,EACK,EADLA,KAAMgC,EACD,EADCA,QAASC,EACV,EADUA,UAAWC,EACrB,EADqBA,MAAUC,GAC/B,YAIL,OAHAC,QAAQC,IAAI,iBAAkBrC,EAAMkC,IAInC,SAAC,KAAD,CACClC,KAAMA,EACNgC,QAASA,EACTM,aAAcL,GAAa,GAC3BM,MAAO,CACNC,SAAS,GAAD,OAAKN,EAAL,yEACRO,UAAW,CAACC,MAAO,EAAGC,QAAQ,GAAD,OAAKT,EAAL,8IAC7BU,UAAW,CAACF,MAAO,GAAIC,QAAQ,GAAD,OAAKT,EAAL,iMAE/BW,OAAQ,oBAAEC,MAAQC,EAAV,EAAUA,SAAUL,EAApB,EAAoBA,MAApB,OACP,SAAC,SAAD,CACC1C,KAAMA,EACNuC,MAAO,CACN,CAACC,UAAU,EAAMG,QAAQ,GAAD,OAAKT,EAAL,gFACxB,CAACc,IAAK,EAAGL,QAAQ,GAAD,OAAKT,EAAL,8IAChB,CAACe,IAAK,GAAIN,QAAQ,GAAD,OAAKT,EAAL,iMAElBgB,aAAcjB,GAAa,GAP5B,UASC,SAAC,KAAD,gBACCkB,YAAajB,EAAOa,SAAUA,EAAUL,MAAOA,GAC3CP,GAFL,IAEWiB,KAAK,WAZV,GAkBV,E,uDC7BKC,EAAe,SAACC,GAEpB,IAAMC,EAA2B,eAAdD,EAAKF,MAAuC,cAAdE,EAAKF,KAEjDG,GACHZ,EAAAA,GAAAA,MAAc,qCAIhB,IAAMa,EAASF,EAAKG,KAAO,KAAO,KAAO,EAMzC,OAJKD,GACHb,EAAAA,GAAAA,MAAc,gCAGTY,GAAcC,CACtB,EAUYE,EAAoC,SAAC,GAA0C,IAAzC1D,EAAwC,EAAxCA,KAAMgC,EAAkC,EAAlCA,QAAS2B,EAAyB,EAAzBA,SAAUnD,EAAe,EAAfA,UAC3E,GAA8BoD,EAAAA,EAAAA,WAAkB,GAAhD,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAgCF,EAAAA,EAAAA,UAAsCpD,GAAtE,eAAOuD,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAACC,GACrB9B,QAAQC,IAAI,OAAQ6B,GACpB,IAAMC,EAAaD,EAAKZ,KAAKc,cAE1BD,GACFR,EAAS,SAAUQ,GAGK,cAArBD,EAAKZ,KAAKhD,OAIW,UAArB4D,EAAKZ,KAAKhD,QAA2C,SAArB4D,EAAKZ,KAAKhD,QAhD9B,SAAC+D,EAAUC,GAC3B,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,iBAAiB,QAAQ,kBAAMH,EAASC,EAAOG,OAAtB,IAChCH,EAAOI,cAAcN,EACtB,CA8CEO,CAAUV,EAAKZ,KAAKc,eAAe,SAACS,GAEnCf,GAAW,GAGXE,EAAYa,EACZ,IAXDf,GAAW,EAaZ,EAEKgB,GACL,2BACEjB,GAAU,SAACkB,EAAA,EAAD,KAAsB,SAACC,EAAA,EAAD,KACjC,gBACCC,MAAO,CACNC,UAAW,GAFb,uBAUIC,EAAS,yCAAG,WAAO7B,GAAP,mFACbjC,EAAMiC,EAAKuB,IADE,gCAGH,IAAIO,SAAQ,SAAAC,GACxB,IAAMd,EAAS,IAAIC,WACnBD,EAAOI,cAAcrB,EAAKc,eAC1BG,EAAOe,OAAS,kBAAMD,EAAQd,EAAOG,OAArB,CACf,IAPc,OAGfrD,EAHe,eASXkE,EAAQ,IAAIC,OACZnE,IAAMA,EAEH,QADHoE,EAAYC,OAAOC,KAAKtE,UACrB,IAAToE,GAAAA,EAAWG,SAASC,MAAMN,EAAMO,WAZf,2CAAH,sDAgBf,OACC,SAAC,KAAD,CACC9F,KAAMA,EACNgC,QAASA,EACTa,OAAQ,oBAAEC,MAAkBJ,GAApB,EAAUK,SAAV,EAAoBL,OAApB,OACP,SAAC,IAAD,WACC,SAAC,IAAD,CACC1C,KAAK,SACL+F,SAAS,eACT9E,UAAU,kBACV+E,gBAAgB,EAEhBtD,MAAOA,EACPuD,OAAO,mDACP5C,aAAcA,EACdN,SAAUkB,EACVkB,UAAWA,EAVZ,SAYEpB,GACA,gBACC1C,IAAK0C,EACLxC,IAAI,SACJ0D,MAAO,CACNiB,MAAO,UAITpB,KAvBI,GA8BV,E,sBCrGYqB,EAAmCrG,EAAAA,MAAW,YAA+B,IAA7BC,EAA4B,EAA5BA,YAAaqG,EAAe,EAAfA,UACzEhE,QAAQC,IAAI,OAAQtC,GACpB,IAAIsG,EAAwB,KACxBC,EAAkD,KAGtD,GAAGvG,EAAa,CACf,aAAgCA,QAAhC,IAAgCA,OAAhC,EAAgCA,EAAaG,UAArCY,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OAAQC,EAAtB,EAAsBA,MACtBoB,QAAQC,IAAI,aAAZ,UAA6BvB,EAA7B,YAAqCC,EAArC,YAA+CC,IAE5CF,GAAQC,GAAUC,IACpBqF,EAAwBE,IAAO,GAAD,QAAI1F,EAAAA,EAAAA,GAAQG,GAAZ,aAAsBH,EAAAA,EAAAA,GAAQE,GAA9B,aAAyCF,EAAAA,EAAAA,GAAQC,MAIhF,IAAM0F,EAAgB,iBAAMzG,QAAN,IAAMA,OAAN,EAAMA,EAAaM,OAAOyB,iBAA1B,oBAA+C/B,QAA/C,IAA+CA,OAA/C,EAA+CA,EAAaM,OAAOoG,eAAnE,KACtBH,EAAqB,CACpBI,GAAIC,OAAM,OAAC5G,QAAD,IAACA,OAAD,EAACA,EAAaM,OAAOoG,gBAC/BG,IAAKJ,EACLxG,KAAMwG,EACN9D,MAAO8D,EAER,CAGC,OAGEK,EAAAA,EAAAA,MAFQC,GADV,EACAC,SADA,EACUD,cAAiCE,GAD3C,EACwBC,MADxB,EAC+BC,UAAYF,QAC3ChF,EAFA,EAEAA,QAAS2B,EAFT,EAESA,SAIX,GAAkCC,EAAAA,EAAAA,WAAkB,GAApD,eAAkBuD,GAAlB,WAGA,GAAgCvD,EAAAA,EAAAA,WAAkB,GAAlD,eAAOwD,EAAP,KAAiBC,EAAjB,KAGA,GAAkDzD,EAAAA,EAAAA,UAAiC,IAAnF,eAAO0D,EAAP,KAA0BC,EAA1B,KAGMC,GAAWC,EAAAA,EAAAA,QAAO,GAElBC,GAAWC,EAAAA,EAAAA,KAGXC,EAAQ,yCAAG,WAAO7H,GAAP,6EAChBqC,QAAQC,IAAI,YAAatC,GAEzBoH,GAAa,GAHG,SAIVO,GAASG,EAAAA,EAAAA,IAAkB9H,IAJjB,OAMhBoH,GAAa,GACbf,GAAU,GAPM,2CAAH,sDAUR0B,GAAkBC,EAAAA,EAAAA,UAAQ,WA4B/B,OA3BoB,SAACrF,GACpB8E,EAASQ,SAAW,EACpB,IAAMC,EAAUT,EAASQ,QAEzBT,EAAqB,IAErBF,GAAY,IAGZa,EAAAA,EAAAA,IAAcxF,GAAOyF,MAAK,SAACC,GAC1B,GAAIH,IAAYT,EAASQ,QAAzB,CAMA,IAAMK,EAAsCD,EAAWE,KAAI,SAAAjI,GAC1D,MAAO,CACNkI,UAAU,EACVrG,MAAO7B,EAAOL,KACd0C,MAAM,GAAD,OAAKrC,EAAOL,KAAZ,aAAqBK,EAAOqG,GAA5B,KAEN,IACDa,EAAqBc,GACrBhB,GAAY,EAXX,CAYD,GACD,CAED,GAAE,IAIH,OAFAjF,QAAQC,IAAI,SAAU2E,IAIrB,iCACC,4IACA,UAAC,IAAD,CACCwB,SAAU1B,EAAac,GAAW3G,UAAWC,EAAAA,YAD9C,WAIC,UAAC,IAAD,CAAKuH,OAAQ,CAAEC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAAM5H,UAAWC,EAAAA,eAA3D,WACC,SAAC,IAAD,CAAK4H,KAAM,GAAX,UAEC,SAAC/G,EAAD,CACCC,QAASA,EAASC,WAAsB,OAAXlC,QAAW,IAAXA,OAAA,EAAAA,EAAaC,OAAQ,KAAMkC,MAAM,sBAC9DlC,KAAK,YAGP,SAAC,IAAD,CAAK8I,KAAM,GAAX,UAEC,SAAC/G,EAAD,CACCC,QAASA,EAAShC,KAAK,UAAUkC,MAAM,mDACvCD,WAAsB,OAAXlC,QAAW,IAAXA,OAAA,EAAAA,EAAaE,UAAW,aAMtC,UAAC,IAAD,CAAKgB,UAAWC,EAAAA,WAAoBuH,OAAQ,CAAEC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAAzE,WAEC,SAAC,IAAD,CAAKC,KAAM,GAAX,UACC,SAAC,SAAD,WACC,SAAC,KAAD,CACC9I,KAAK,SACLgC,QAASA,EACTO,MACC,CAACC,SAAU,8EAEZF,aAAcgE,EACdzD,OAAQ,oBAAEC,MAAQC,EAAV,EAAUA,SAAUL,EAApB,EAAoBA,MAApB,OACP,SAAC,IAAD,CACCK,SAAUA,EACVwF,UAAU,EACV7F,MAAOA,EACPqG,cAAY,EACZC,cAAc,EACdC,SAAUnB,EACV3E,YAAY,yIACZ+F,YAAU,EACVC,gBAAiB/B,GAAW,SAAC,IAAD,CAAM3D,KAAK,UAAa,KACpD2F,QAAS9B,EACTrG,UAAWC,EAAAA,cAZL,SAmBX,SAAC,IAAD,CAAK4H,KAAM,EAAX,UAEC,SAAC,SAAD,WACC,SAAC,KAAD,CACC9I,KAAK,QACLgC,QAASA,EACTM,aAAY,OAAEvC,QAAF,IAAEA,OAAF,EAAEA,EAAaK,MAC3BmC,MAAO,CAACC,SAAU,0FAClBK,OAAQ,oBAAEC,MAAQC,EAAV,EAAUA,SAAUL,EAApB,EAAoBA,MAApB,OACP,SAAC,SAAD,CACC1C,KAAM,QACNuC,MAAO,CACN,CAACC,UAAU,EAAMG,QAAS,2FAE3BO,aAAY,OAAEnD,QAAF,IAAEA,OAAF,EAAEA,EAAaK,MAL5B,UAOC,SAACiJ,EAAA,EAAD,CACCpI,UAAWC,EAAAA,YACX6B,SAAUA,EAAUL,MAAOA,EAC3BS,YAAY,iDAXP,YAqBZ,SAAC,KAAD,CACCnD,KAAK,YACLgC,QAASA,EACTM,aAAc+D,EAEdxD,OAAQ,oBAAEC,MAAkBJ,GAApB,EAAUK,SAAV,EAAoBL,OAApB,OACP,SAAC,SAAD,WACC,SAAC,IAAD,CACCS,YAAY,wFAAkBT,MAAOA,EACrCK,SAAU,SAACL,GACViB,EAAS,YAAajB,EACtB,KANI,KAWT,SAAC,SAAD,CAAWzB,UAAWC,EAAAA,aAAtB,UACC,SAACwC,EAAD,CACCC,SAAUA,EAAU3D,KAAK,SACzBgC,QAASA,EAASxB,WAAsB,OAAXT,QAAW,IAAXA,OAAA,EAAAA,EAAaS,YAAa,UAGzD,SAAC8I,EAAA,EAAD,CACCtH,QAASA,EACThC,KAAK,UACLsC,aAAY,OAAEvC,QAAF,IAAEA,OAAF,EAAEA,EAAaQ,QAC3BqC,UAAW,IACXO,YAAY,kGACZlC,UAAWC,EAAAA,gBAEZ,SAAC,IAAD,CAAQqI,SAAS,SAAjB,mEAOH,I,UCjPD,EAA6E,qCAA7E,EAAyH,4BAAzH,EAA4J,4BCG/IC,EAAgB,WAC5B,OACC,iBAAKvI,UAAWC,EAAhB,WACC,SAAC,KAAD,CAAWD,UAAWC,KACtB,iBAAMD,UAAWC,EAAjB,iLAGF,EC6DD,GAzDqC,SAAC,IAAQ,UAC7C,OAAkC0C,EAAAA,EAAAA,WAAkB,GAApD,eAAO6F,EAAP,KAAkBC,EAAlB,KAEMC,GAAgBjJ,EAAAA,EAAAA,IAAYkJ,EAAAA,IAC5BC,GAAsBnJ,EAAAA,EAAAA,IAAYoJ,EAAAA,IAElCC,GAAarJ,EAAAA,EAAAA,IAAYsJ,EAAAA,IACzBC,GAAWvJ,EAAAA,EAAAA,IAAYwJ,EAAAA,IAErBC,GAAWC,EAAAA,EAAAA,MAAXD,OAER/H,QAAQC,IAAI,UAAW8H,GACvB/H,QAAQC,IAAI,yBAA0BwH,GAGtC,IAAM9J,EAAcoK,EAASN,EAAsBF,EAC7CU,GAAQF,EAEd,GAA4BvG,EAAAA,EAAAA,WAAkB,GAA9C,eAAO0G,EAAP,KAAelE,EAAf,MAEAmE,EAAAA,EAAAA,YAAU,WACTb,GAAa,GACTS,GAAWR,GAAevD,GAAU,GACrC+D,GACFzC,GAAS8C,EAAAA,EAAAA,IAAsBL,IAEhCT,GAAa,EACb,GAAE,CAACS,IAEJ/H,QAAQC,IAAI,cAAetC,GAE3B,IAAM2H,GAAWC,EAAAA,EAAAA,KAIjB,OAFAvF,QAAQC,IAAI,cAAe0H,GAEvBE,EACDF,GAAcN,GAAkB,SAACgB,EAAA,EAAD,KAGlC,iBAAKxJ,UAAWC,EAAhB,WAEEoJ,GAAUvK,GACV,SAACF,EAAD,CAAaE,YAAaA,IACzBsK,GACD,SAAClE,EAAD,CAAapG,YAAa4J,EAAevD,UAAWA,KAEnD,SAACoD,EAAD,IAGAa,IAAQ,SAAC,IAAD,CAAQK,QAAS,kBAAMtE,GAAWkE,EAAjB,EAAjB,SACNA,EAAoCX,EAAgB,qGAAuB,GAAlE,uHAfM,SAAC,KAAD,CAAUgB,GAAG,SAASC,SAAS,GAoBpD,C,wDCtEM,IAAM/J,EAAU,SAACgK,GACvB,OAAOA,EAAM,GAAN,WAAeA,GAAQA,CAC9B,C","sources":["webpack://my-app/./src/components/Account/Account.module.scss?6f0f","webpack://my-app/./src/components/Account/AccountBody/AccountBody.module.scss?ea10","components/Account/AccountBody/AccountBody.tsx","webpack://my-app/./src/components/Account/AccountForm/AccountForm.module.scss?0ee5","components/Account/AccountForm/InitialInput/InitialInput.tsx","components/Account/AccountForm/AvatarUpload/AvatarUpload.tsx","components/Account/AccountForm/AccountForm.tsx","webpack://my-app/./src/components/Account/NoAccountData/NoAccountData.module.scss?1ae3","components/Account/NoAccountData/NoAccountData.tsx","components/Account/Account.tsx","utils/helpers/formatters.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Account_container__vNpht\",\"Account\":\"Account_Account__VhXsS\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"AccountBody_container__5O5mO\",\"AccountBody\":\"AccountBody_AccountBody__EK0Qk\",\"AccountHeader\":\"AccountBody_AccountHeader__YVG0Q\",\"cover\":\"AccountBody_cover__hpRxf\",\"avatar\":\"AccountBody_avatar__kH02W\"};","import { UserOutlined } from '@ant-design/icons';\r\nimport { Avatar } from 'antd';\r\nimport Link from 'antd/lib/typography/Link';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectMyLoginData } from '../../../Redux/account/account-selectors';\r\nimport { ReceivedAccountDataType } from '../../../utils/types';\r\nimport classes from './AccountBody.module.scss';\r\n\r\nimport SchoolIcon from '../../../assets/images/school-icon.png';\r\nimport BirthdayIcon from '../../../assets/images/birthday-icon.png';\r\nimport { addZero } from '../../../utils/helpers/formatters';\r\n\r\ntype PropsType = {\r\n\taccountData: ReceivedAccountDataType,\r\n};\r\n\r\nexport const AccountBody: React.FC<PropsType> = React.memo(({accountData}) => {\r\n\tconst {\r\n\t\tname, surname, birthDate, class: classNum, school, status, aboutMe, avatarUrl\r\n\t} = accountData;\r\n\tconst loginData = useSelector(selectMyLoginData);\r\n\r\n\r\n\tconst birthDayDate = `${addZero(birthDate.date)}.${addZero(birthDate.months)}.${addZero(birthDate.years)}`;\r\n\r\n\treturn (\r\n\t\t<div className={classes.AccountBody}>\r\n\t\t\t<div className={classes.AccountHeader}>\r\n\t\t\t\t<div className={classes.cover}></div>\r\n\t\t\t\t<Avatar \r\n\t\t\t\t\tclassName={classes.avatar} icon={<UserOutlined />} \r\n\t\t\t\t\tsrc={ avatarUrl || loginData?.photoURL } alt='Фото користувача'\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.AccountInfo}>\r\n\t\t\t\t<h1 className={classes.fullName}>{surname} { name}</h1>\r\n\t\t\t\t<p className={classes.classNum}>{classNum}</p>\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.birthDate}>\r\n\t\t\t\t<div className={classes.icon}>\r\n\t\t\t\t\t<img src={BirthdayIcon} alt='cake img'/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<span>{birthDayDate}</span> \r\n\t\t\t</div>\r\n\t\t\t<p className={classes.status}>{status}</p>\r\n\t\t\t<p className={classes.about}>{aboutMe}</p>\r\n\t\t\t<div className={classes.AccountSchoo}>\r\n\t\t\t\t<Link href={school.website} title='Сайт школи' target='_blank' className={classes.school} >\r\n\t\t\t\t\t<div className={classes.icon}>\r\n\t\t\t\t\t\t<img src={SchoolIcon} alt='Школа: '/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{school.institution_name}\r\n\t\t\t\t</Link>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n});\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"AccountForm_container__ndPFo\",\"AccountForm\":\"AccountForm_AccountForm__YUy6A\",\"initialsInputs\":\"AccountForm_initialsInputs__L7p85\",\"avatarUpload\":\"AccountForm_avatarUpload__6jfNz\",\"aboutMe\":\"AccountForm_aboutMe__zy41e\",\"schoolInfo\":\"AccountForm_schoolInfo__CcczA\",\"selectSchool\":\"AccountForm_selectSchool__WhRyJ\"};","import { Form, Input } from 'antd'\r\nimport React from 'react'\r\nimport { Controller } from 'react-hook-form'\r\n\r\ntype PropsType = {\r\n\tname: string,\r\n\tcontrol: any,\r\n\tinitValue: string | null,\r\n\tlabel: string,\r\n}\r\n\r\nexport const InitialInput: React.FC<PropsType> = ({\r\n\tname, control, initValue, label, ...rest\r\n}) => {\r\n\tconsole.log('initials input', name, label);\r\n\r\n\r\n\treturn (\r\n\t\t<Controller \r\n\t\t\tname={name}\r\n\t\t\tcontrol={control}\r\n\t\t\tdefaultValue={initValue || ''}\r\n\t\t\trules={{\r\n\t\t\t\trequired: `${label} є обов'яковим`,\r\n\t\t\t\tminLength: {value: 2, message: `${label} не може бути однією буквою`},\r\n\t\t\t\tmaxLength: {value: 25, message: `${label} занадто довге, скоротіть, будь ласка`},\r\n\t\t\t}}\r\n\t\t\trender={({field: {onChange, value}}) => (\r\n\t\t\t\t<Form.Item\r\n\t\t\t\t\tname={name}\r\n\t\t\t\t\trules={[\r\n\t\t\t\t\t\t{required: true, message: `${label} є обов'язковим`},\r\n\t\t\t\t\t\t{min: 2, message: `${label} не може бути однією буквою`},\r\n\t\t\t\t\t\t{max: 25, message: `${label} занадто довге, скоротіть, будь ласка`},\r\n\t\t\t\t\t]}\r\n\t\t\t\t\tinitialValue={initValue || ''}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Input \r\n\t\t\t\t\t\tplaceholder={label} onChange={onChange} value={value}\r\n\t\t\t\t\t\t{...rest} type='text'\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Form.Item>\r\n\t\t\t)}\r\n\t\t/>\r\n\t)\r\n}\r\n","import React, { useState } from 'react';\r\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { message, Upload, UploadFile } from 'antd';\r\nimport { RcFile, UploadChangeParam } from 'antd/lib/upload';\r\nimport { Controller, UseFormSetValue } from 'react-hook-form';\r\nimport { FieldValues } from '../AccountForm';\r\nimport ImgCrop from 'antd-img-crop';\r\n\r\nexport type UploadAvatarInfoType = UploadChangeParam<UploadFile<any>>;\r\n\r\nconst getBase64 = (img: any, callback: (url: string | ArrayBuffer | null) => void) => {\r\n  const reader = new FileReader();\r\n  reader.addEventListener('load', () => callback(reader.result));\r\n  reader.readAsDataURL(img);\r\n};\r\n\r\nconst beforeUpload = (file: File) => {\r\n\t//check isfile have correct type\r\n  const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\r\n\r\n  if (!isJpgOrPng) {\r\n    message.error('You can only upload JPG/PNG file!');\r\n  }\r\n\r\n  //check is file  smaller than 2MB\r\n  const isLt2M = file.size / 1024 / 1024 < 2;\r\n\r\n  if (!isLt2M) {\r\n    message.error('Image must smaller than 2MB!');\r\n  }\r\n\r\n  return isJpgOrPng && isLt2M;\r\n};\r\n\r\n\r\ntype PropsType = {\r\n\tname: string,\r\n\tcontrol: any,\r\n\tsetValue: UseFormSetValue<FieldValues>,\r\n\tavatarUrl: string | null,\r\n}\r\n\r\nexport const AvatarUpload: React.FC<PropsType> = ({name, control, setValue, avatarUrl}) => {\r\n\tconst [loading, setLoading] = useState<boolean>(false);\r\n\tconst [imageUrl, setImageUrl] = useState<string | ArrayBuffer | null>(avatarUrl);\r\n\r\n\tconst handleChange = (info: UploadAvatarInfoType) => {\r\n\t\tconsole.log('info', info);\r\n\t\tconst avatarFile = info.file.originFileObj;\r\n\r\n\t\tif(avatarFile) {\r\n\t\t\tsetValue('avatar', avatarFile);\r\n\t\t}\r\n\r\n\t\tif (info.file.status === 'uploading') {\r\n\t\t\tsetLoading(true);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (info.file.status === 'error' || info.file.status === 'done') {\r\n\t\t\t// Get this url from response in real world.\r\n\t\t\tgetBase64(info.file.originFileObj, (url: string | ArrayBuffer | null) => {\r\n\t\t\t\t//turn off preloader\r\n\t\t\t\tsetLoading(false);\r\n\r\n\t\t\t\t//set url\r\n\t\t\t\tsetImageUrl(url);\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tconst uploadButton = (\r\n\t\t<div>\r\n\t\t\t{loading ? <LoadingOutlined /> : <PlusOutlined />}\r\n\t\t\t<div\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\tmarginTop: 8,\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\tUpload\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n\t\r\n\tconst onPreview = async (file: UploadFile) => {\r\n\t\tlet src = file.url as string;\r\n\t\tif (!src) {\r\n\t\t  src = await new Promise(resolve => {\r\n\t\t\t const reader = new FileReader();\r\n\t\t\t reader.readAsDataURL(file.originFileObj as RcFile);\r\n\t\t\t reader.onload = () => resolve(reader.result as string);\r\n\t\t  });\r\n\t\t}\r\n\t\tconst image = new Image();\r\n\t\timage.src = src;\r\n\t\tconst imgWindow = window.open(src);\r\n\t\timgWindow?.document.write(image.outerHTML);\r\n\t};\r\n\r\n\t//@ts-ignore\r\n\treturn (\r\n\t\t<Controller\r\n\t\t\tname={name}\r\n\t\t\tcontrol={control}\r\n\t\t\trender={({field: {onChange, value}}) => (\r\n\t\t\t\t<ImgCrop>\r\n\t\t\t\t\t<Upload\r\n\t\t\t\t\t\tname=\"avatar\"\r\n\t\t\t\t\t\tlistType=\"picture-card\"\r\n\t\t\t\t\t\tclassName=\"avatar-uploader\"\r\n\t\t\t\t\t\tshowUploadList={false}\r\n\t\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t\t\tvalue={value}\r\n\t\t\t\t\t\taction=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\r\n\t\t\t\t\t\tbeforeUpload={beforeUpload}\r\n\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\tonPreview={onPreview}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{imageUrl ? (\r\n\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\tsrc={imageUrl as string}\r\n\t\t\t\t\t\t\t\talt=\"avatar\"\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\twidth: '100%',\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\tuploadButton\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Upload>\r\n\t\t\t\t</ImgCrop>\r\n\t\t\t)} \r\n\t\t/>\r\n\t);\r\n};\r\n","import React, { useMemo, useRef, useState } from 'react'\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport { Button, Col, DatePicker, Form, Row, Select, Spin } from 'antd';\r\nimport { AccountDataType, ReceivedAccountDataType, SchoolInfoType, SchoolSearchItemType } from '../../../utils/types';\r\nimport classes from './AccountForm.module.scss';\r\nimport { searchSchool as searchSchools, sendMyAccountData } from '../../../Redux/account/account-reducer';\r\nimport { useAppDispatch } from '../../../Redux/store';\r\nimport moment from 'moment';\r\nimport { InitialInput } from './InitialInput';\r\nimport { AvatarUpload } from './AvatarUpload';\r\nimport { addZero } from '../../../utils/helpers/formatters';\r\nimport { About } from '../../../UI/formControls/About';\r\nimport { ClassSelect } from '../../../UI/formControls/ClassSelect';\r\n\r\ntype PropsType = {\r\n\taccountData: ReceivedAccountDataType | null,\r\n\tsetIsEdit: (value: boolean) => void,\r\n};\r\n \r\ntype SchoolDefaultValueType = ((SchoolInfoType | SchoolSearchItemType | undefined) & SchoolSearchItemType) | undefined;\r\n\r\nexport type FieldValues = AccountDataType & {\r\n\tschool: SchoolSearchItemType,\r\n\tbirthDate: any,\r\n};\r\n\r\ntype SchoolSelectItemType = {\r\n\tdisabled: boolean,\r\n\tlabel: string,\r\n\tvalue?: string,\r\n}\r\n\r\nexport const AccountForm: React.FC<PropsType> = React.memo(({accountData, setIsEdit}) => {\r\n\tconsole.log('form', accountData);\r\n\tlet defaultBirthDateValue = null;\r\n\tlet defaultSchoolValue: SchoolSearchItemType | null = null;\r\n\r\n\t//форматовані дані для початкових значень деяких інпутів\r\n\tif(accountData) {\r\n\t\tconst { date, months, years } = accountData?.birthDate;\r\n\t\tconsole.log('bitrh date', `${date}-${months}-${years}`);\r\n\r\n\t\tif(date && months && years) {\r\n\t\t\tdefaultBirthDateValue = moment(`${addZero(years)}-${addZero(months)}-${addZero(date)}`);\r\n\t\t}  \r\n\r\n\t\t//\r\n\t\tconst baseSchoolString = `${accountData?.school.institution_name} (${accountData?.school.institution_id})`;\r\n\t\tdefaultSchoolValue = {\r\n\t\t\tid: Number(accountData?.school.institution_id),\r\n\t\t\tkey: baseSchoolString,\r\n\t\t\tname: baseSchoolString,\r\n\t\t\tvalue: baseSchoolString,\r\n\t\t}\r\n\t}\r\n\r\n\t//use Form\r\n   const { \r\n\t  register, handleSubmit, watch, formState: {errors},\r\n\t  control, setValue,\r\n\t} = useForm<FieldValues>();\r\n\r\n\t//prealoder під час відправки запиту\r\n\tconst [isSending, setIsSending] = useState<boolean>(false)\r\n\r\n\t//preloader для відображення, під час запиту на сервер\r\n\tconst [fetching, setFetching] = useState<boolean>(false);\r\n\r\n\t//список для select\r\n\tconst [schoolsSearchList, setSchoolsSearchList] = useState<SchoolSelectItemType[]>([]);\r\n\r\n\t//це треба\r\n\tconst fetchRef = useRef(0);\r\n\r\n\tconst dispatch = useAppDispatch();\r\n\r\n\t//коли форма субітиться -> дані в staте -> дані на сервер\r\n\tconst onSubmit = async (accountData: FieldValues) => {\r\n\t\tconsole.log('send data', accountData);\r\n\r\n\t\tsetIsSending(true);\r\n\t\tawait dispatch(sendMyAccountData(accountData));\r\n\t\t//await dispatch(setMySchool(Number(id)));\r\n\t\tsetIsSending(false);\r\n\t\tsetIsEdit(false);\r\n\t}\r\n\r\n\tconst debounceFetcher = useMemo(() => {\r\n\t\tconst loadOptions = (value: string) => {\r\n\t\t\tfetchRef.current += 1;\r\n\t\t\tconst fetchId = fetchRef.current;\r\n\r\n\t\t\tsetSchoolsSearchList([]);\r\n\r\n\t\t\tsetFetching(true);\r\n\r\n\t\t\t//отримати дані із серверу\r\n\t\t\tsearchSchools(value).then((newOptions: SchoolSearchItemType[]) => {\r\n\t\t\t\tif (fetchId !== fetchRef.current) {\r\n\t\t\t\t\t// for fetch callback order\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//фідформатувати результат для options\r\n\t\t\t\tconst schoolsList: SchoolSelectItemType[] = newOptions.map(school => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdisabled: false,\r\n\t\t\t\t\t\tlabel: school.name,\r\n\t\t\t\t\t\tvalue: `${school.name} (${school.id})`,\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tsetSchoolsSearchList(schoolsList);\r\n\t\t\t\tsetFetching(false);\r\n\t\t\t});\r\n\t\t};\r\n\t\treturn loadOptions;\r\n\t}, []);\r\n\r\n\tconsole.log('errors', errors);\r\n\r\n\treturn (\r\n\t\t// onFinish == onSubmit\r\n\t\t<>\r\n\t\t\t<h2>Змінити дані профілю</h2>\r\n\t\t\t<Form \r\n\t\t\t\tonFinish={handleSubmit(onSubmit)} className={classes.AccountForm}\r\n\t\t\t>\r\n\t\t\t\t{/* name & surname */}\r\n\t\t\t\t<Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }} className={classes.initialsInputs}>\r\n\t\t\t\t\t<Col span={12}>\r\n\t\t\t\t\t\t{/* Input name */}\r\n\t\t\t\t\t\t<InitialInput \r\n\t\t\t\t\t\t\tcontrol={control} initValue={accountData?.name || null} label=\"Ім'я\" \r\n\t\t\t\t\t\t\tname='name'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t<Col span={12}>\r\n\t\t\t\t\t\t{/* Input surname */}\r\n\t\t\t\t\t\t<InitialInput \r\n\t\t\t\t\t\t\tcontrol={control} name='surname' label='Прізвище'\r\n\t\t\t\t\t\t\tinitValue={accountData?.surname || null}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\r\n\t\t\t\t{/* select schoold and class  */}\r\n\t\t\t\t<Row className={classes.schoolInfo} gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n\t\t\t\t\t{/* select school(input -> fetcht to server -> options) */}\r\n\t\t\t\t\t<Col span={15}>\r\n\t\t\t\t\t\t<Form.Item >\r\n\t\t\t\t\t\t\t<Controller \r\n\t\t\t\t\t\t\t\tname='school'\r\n\t\t\t\t\t\t\t\tcontrol={control}\r\n\t\t\t\t\t\t\t\trules={\r\n\t\t\t\t\t\t\t\t\t{required: 'Оберіть школу!'}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tdefaultValue={defaultSchoolValue as SchoolSearchItemType}\r\n\t\t\t\t\t\t\t\trender={({field: {onChange, value}}) => (\r\n\t\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\t\t\t\t\t\tdisabled={false}\r\n\t\t\t\t\t\t\t\t\t\tvalue={value}\r\n\t\t\t\t\t\t\t\t\t\tlabelInValue\r\n\t\t\t\t\t\t\t\t\t\tfilterOption={false}\r\n\t\t\t\t\t\t\t\t\t\tonSearch={debounceFetcher}\r\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Знайти навчальний заклад\"\t\r\n\t\t\t\t\t\t\t\t\t\tshowSearch\r\n\t\t\t\t\t\t\t\t\t\tnotFoundContent={fetching ? <Spin size=\"small\" /> : null}\r\n\t\t\t\t\t\t\t\t\t\toptions={schoolsSearchList}\r\n\t\t\t\t\t\t\t\t\t\tclassName={classes.selectSchool}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Form.Item>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t{/* select class */}\r\n\t\t\t\t\t<Col span={3}>\r\n\r\n\t\t\t\t\t\t<Form.Item >\r\n\t\t\t\t\t\t\t<Controller\r\n\t\t\t\t\t\t\t\tname='class'\r\n\t\t\t\t\t\t\t\tcontrol={control}\r\n\t\t\t\t\t\t\t\tdefaultValue={accountData?.class}\r\n\t\t\t\t\t\t\t\trules={{required: 'Оберіть ваш клас'}}\r\n\t\t\t\t\t\t\t\trender={({field: {onChange, value}}) => (\r\n\t\t\t\t\t\t\t\t\t<Form.Item\r\n\t\t\t\t\t\t\t\t\t\tname={'class'}\r\n\t\t\t\t\t\t\t\t\t\trules={[\r\n\t\t\t\t\t\t\t\t\t\t\t{required: true, message: 'Оберіть ваш клас'}\r\n\t\t\t\t\t\t\t\t\t\t]}\r\n\t\t\t\t\t\t\t\t\t\tinitialValue={accountData?.class}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<ClassSelect \r\n\t\t\t\t\t\t\t\t\t\t\tclassName={classes.classSelect}\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={onChange} value={value}\r\n\t\t\t\t\t\t\t\t\t\t\tplaceholder='Ваш клас' \r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</Form.Item>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Form.Item>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\r\n\t\t\t\t{/* select birth date */}\t\t\t\t\r\n\t\t\t\t<Controller \r\n\t\t\t\t\tname='birthDate'\r\n\t\t\t\t\tcontrol={control}\r\n\t\t\t\t\tdefaultValue={defaultBirthDateValue}\r\n\r\n\t\t\t\t\trender={({field: {onChange, value}}) => (\r\n\t\t\t\t\t\t<Form.Item>\r\n\t\t\t\t\t\t\t<DatePicker \r\n\t\t\t\t\t\t\t\tplaceholder='Дата народження' value={value}\r\n\t\t\t\t\t\t\t\tonChange={(value: moment.Moment | null): void => {\r\n\t\t\t\t\t\t\t\t\tsetValue('birthDate', value);\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Form.Item>\r\n\t\t\t\t\t)}\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.Item className={classes.avatarUpload}>\r\n\t\t\t\t\t<AvatarUpload \r\n\t\t\t\t\t\tsetValue={setValue} name='avatar' \r\n\t\t\t\t\t\tcontrol={control} avatarUrl={accountData?.avatarUrl || null}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Form.Item>\r\n\t\t\t\t<About<FieldValues> \r\n\t\t\t\t\tcontrol={control}\r\n\t\t\t\t\tname='aboutMe'\r\n\t\t\t\t\tdefaultValue={accountData?.aboutMe}\r\n\t\t\t\t\tmaxLength={250}\r\n\t\t\t\t\tplaceholder='Напишіть про себе...'\r\n\t\t\t\t\tclassName={classes.textareaWrap}\r\n\t\t\t\t/>\r\n\t\t\t\t<Button htmlType='submit'>\r\n\t\t\t\t\tЗберегти\r\n\t\t\t\t</Button>\r\n\t\t\t</Form>\r\n\t\t</>\t\r\n\t);\r\n\r\n});","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"NoAccountData_container__WqkYG\",\"NoAccountData\":\"NoAccountData_NoAccountData__j9fiA\",\"icon\":\"NoAccountData_icon__ecUv4\",\"text\":\"NoAccountData_text__LZSzB\"};","import React from 'react';\r\nimport { ErrorIcon } from '../../../UI/Icons';\r\nimport classes from './NoAccountData.module.scss';\r\n\r\nexport const NoAccountData = () => {\r\n\treturn (\r\n\t\t<div className={classes.NoAccountData}>\r\n\t\t\t<ErrorIcon className={classes.icon} />\r\n\t\t\t<span className={classes.text}>Користувач ще не вніс свої дані</span>\r\n\t\t</div>\r\n\t)\r\n}\r\n","import { Button } from 'antd';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport classes from './Account.module.scss';\r\nimport { Navigate, useParams } from 'react-router-dom';\r\nimport { setAnotherUserAccount, setMyAccount } from '../../Redux/account/account-reducer';\r\nimport { selectAccountIsFetching, selectAuthedStatus, selectCurrUserAccountData, selectMyAccountData, selectMyLoginData } from '../../Redux/account/account-selectors';\r\nimport { useAppDispatch } from '../../Redux/store';\r\nimport Preloader from '../../UI/Preloader';\r\nimport { AccountBody } from './AccountBody';\r\nimport { AccountForm } from './AccountForm';\r\nimport { NoAccountData } from './NoAccountData';\r\n\r\ntype PropsType = {};\r\n\r\nconst Account: React.FC<PropsType> = ({}) => {\r\n\tconst [isLoading, setIsLoading] = useState<boolean>(true);\r\n\r\n\tconst myAccountData = useSelector(selectMyAccountData);\r\n\tconst currUserAccountData = useSelector(selectCurrUserAccountData);\r\n\r\n\tconst isFetching = useSelector(selectAccountIsFetching);\r\n\tconst isAuthed = useSelector(selectAuthedStatus);\r\n\r\n\tconst { userId } = useParams();\r\n\r\n\tconsole.log('user id', userId);\r\n\tconsole.log('curr user account data', currUserAccountData);\r\n\r\n\r\n\tconst accountData = userId ? currUserAccountData : myAccountData;\r\n\tconst isMy = !userId;\r\n\r\n\tconst [isEdit, setIsEdit] = useState<boolean>(false);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetIsLoading(true);\r\n\t\tif(!userId && !myAccountData) setIsEdit(true);\r\n\t\tif(userId) {\r\n\t\t\tdispatch(setAnotherUserAccount(userId));\r\n\t\t}\r\n\t\tsetIsLoading(false);\r\n\t}, [userId]);\r\n\r\n\tconsole.log('axxoun data', accountData);\r\n\r\n\tconst dispatch = useAppDispatch();\r\n\r\n\tconsole.log('is fetching', isFetching);\r\n\r\n\tif(!isAuthed) return <Navigate to='/login' replace={true}/>\r\n\tif(isFetching && isLoading) return <Preloader />;\r\n\r\n\treturn (\r\n\t\t<div className={classes.Account}>\r\n\t\t\t{\r\n\t\t\t!isEdit && accountData ?\r\n\t\t\t\t<AccountBody accountData={accountData} />\r\n\t\t\t: isMy ? (\r\n\t\t\t\t<AccountForm accountData={myAccountData} setIsEdit={setIsEdit}/>\r\n\t\t\t) \r\n\t\t\t: <NoAccountData />\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t{ isMy && <Button onClick={() => setIsEdit(!isEdit)}>\r\n\t\t\t\t\t{!isEdit ? 'Змінити дані профілю' : !!myAccountData ? 'Не зберігати зміни' : '' }\r\n\t\t\t\t</Button>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Account","export const addZero = (num: number) => {\r\n\treturn num < 10 ? `0${num}` : num;\r\n}"],"names":["AccountBody","React","accountData","name","surname","birthDate","classNum","class","school","status","aboutMe","avatarUrl","loginData","useSelector","selectMyLoginData","birthDayDate","addZero","date","months","years","className","classes","icon","UserOutlined","src","photoURL","alt","BirthdayIcon","Link","href","website","title","target","institution_name","InitialInput","control","initValue","label","rest","console","log","defaultValue","rules","required","minLength","value","message","maxLength","render","field","onChange","min","max","initialValue","placeholder","type","beforeUpload","file","isJpgOrPng","isLt2M","size","AvatarUpload","setValue","useState","loading","setLoading","imageUrl","setImageUrl","handleChange","info","avatarFile","originFileObj","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","getBase64","url","uploadButton","LoadingOutlined","PlusOutlined","style","marginTop","onPreview","Promise","resolve","onload","image","Image","imgWindow","window","open","document","write","outerHTML","listType","showUploadList","action","width","AccountForm","setIsEdit","defaultBirthDateValue","defaultSchoolValue","moment","baseSchoolString","institution_id","id","Number","key","useForm","handleSubmit","register","errors","watch","formState","setIsSending","fetching","setFetching","schoolsSearchList","setSchoolsSearchList","fetchRef","useRef","dispatch","useAppDispatch","onSubmit","sendMyAccountData","debounceFetcher","useMemo","current","fetchId","searchSchools","then","newOptions","schoolsList","map","disabled","onFinish","gutter","xs","sm","md","lg","span","labelInValue","filterOption","onSearch","showSearch","notFoundContent","options","ClassSelect","About","htmlType","NoAccountData","isLoading","setIsLoading","myAccountData","selectMyAccountData","currUserAccountData","selectCurrUserAccountData","isFetching","selectAccountIsFetching","isAuthed","selectAuthedStatus","userId","useParams","isMy","isEdit","useEffect","setAnotherUserAccount","Preloader","onClick","to","replace","num"],"sourceRoot":""}